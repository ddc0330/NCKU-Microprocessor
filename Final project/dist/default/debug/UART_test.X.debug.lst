

Microchip MPLAB XC8 Assembler V2.50 build 20240725155939 
                                                                                               Tue Jan 14 16:39:53 2025

Microchip MPLAB XC8 C Compiler v2.50 (Free license) build 20240725155939 Og1 
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	cinit,global,reloc=2,class=CODE,space=0,delta=1
     6                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,space=0,delta=1
     9                           	psect	intcode,global,reloc=2,class=CODE,space=0,delta=1
    10                           	psect	intcode_body,global,reloc=2,class=CODE,space=0,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,space=0,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,space=0,delta=1
    13                           	psect	smallconst,global,reloc=2,class=SMALLCONST,space=0,delta=1,noexec
    14                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    15                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    16                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1,lowdata
    17                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    18                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    19   000000                     
    20                           ; Generated 25/07/2024 GMT
    21                           ; 
    22                           ; Copyright Â© 2024, Microchip Technology Inc. and its subsidiaries ("Microchip")
    23                           ; All rights reserved.
    24                           ; 
    25                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    26                           ; 
    27                           ; Redistribution and use in source and binary forms, with or without modification, are
    28                           ; permitted provided that the following conditions are met:
    29                           ; 
    30                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    31                           ;        conditions and the following disclaimer.
    32                           ; 
    33                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    34                           ;        of conditions and the following disclaimer in the documentation and/or other
    35                           ;        materials provided with the distribution. Publication is not required when
    36                           ;        this file is used in an embedded application.
    37                           ; 
    38                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    39                           ;        software without specific prior written permission.
    40                           ; 
    41                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    42                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    43                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    44                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    45                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    46                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    47                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    48                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    49                           ; 
    50                           ; 
    51                           ; Code-generator required, PIC18F4520 Definitions
    52                           ; 
    53                           ; SFR Addresses
    54   000FE0                     bsr             equ	4064
    55   000FE9                     fsr0            equ	4073
    56   000FEA                     fsr0h           equ	4074
    57   000FE9                     fsr0l           equ	4073
    58   000FE1                     fsr1            equ	4065
    59   000FE2                     fsr1h           equ	4066
    60   000FE1                     fsr1l           equ	4065
    61   000FD9                     fsr2            equ	4057
    62   000FDA                     fsr2h           equ	4058
    63   000FD9                     fsr2l           equ	4057
    64   000FEF                     indf0           equ	4079
    65   000FE7                     indf1           equ	4071
    66   000FDF                     indf2           equ	4063
    67   000FF2                     intcon          equ	4082
    68   000000                     nvmcon          equ	0
    69   000FF9                     pcl             equ	4089
    70   000FFA                     pclath          equ	4090
    71   000FFB                     pclatu          equ	4091
    72   000FEB                     plusw0          equ	4075
    73   000FE3                     plusw1          equ	4067
    74   000FDB                     plusw2          equ	4059
    75   000FED                     postdec0        equ	4077
    76   000FE5                     postdec1        equ	4069
    77   000FDD                     postdec2        equ	4061
    78   000FEE                     postinc0        equ	4078
    79   000FE6                     postinc1        equ	4070
    80   000FDE                     postinc2        equ	4062
    81   000FEC                     preinc0         equ	4076
    82   000FE4                     preinc1         equ	4068
    83   000FDC                     preinc2         equ	4060
    84   000FF3                     prod            equ	4083
    85   000FF4                     prodh           equ	4084
    86   000FF3                     prodl           equ	4083
    87   000FD8                     status          equ	4056
    88   000FF5                     tablat          equ	4085
    89   000FF6                     tblptr          equ	4086
    90   000FF7                     tblptrh         equ	4087
    91   000FF6                     tblptrl         equ	4086
    92   000FF8                     tblptru         equ	4088
    93   000FFD                     tosl            equ	4093
    94   000FE8                     wreg            equ	4072
    95   000F80                     PORTA           equ	3968	;# 
    96   000F81                     PORTB           equ	3969	;# 
    97   000F82                     PORTC           equ	3970	;# 
    98   000F83                     PORTD           equ	3971	;# 
    99   000F84                     PORTE           equ	3972	;# 
   100   000F89                     LATA            equ	3977	;# 
   101   000F8A                     LATB            equ	3978	;# 
   102   000F8B                     LATC            equ	3979	;# 
   103   000F8C                     LATD            equ	3980	;# 
   104   000F8D                     LATE            equ	3981	;# 
   105   000F92                     TRISA           equ	3986	;# 
   106   000F92                     DDRA            equ	3986	;# 
   107   000F93                     TRISB           equ	3987	;# 
   108   000F93                     DDRB            equ	3987	;# 
   109   000F94                     TRISC           equ	3988	;# 
   110   000F94                     DDRC            equ	3988	;# 
   111   000F95                     TRISD           equ	3989	;# 
   112   000F95                     DDRD            equ	3989	;# 
   113   000F96                     TRISE           equ	3990	;# 
   114   000F96                     DDRE            equ	3990	;# 
   115   000F9B                     OSCTUNE         equ	3995	;# 
   116   000F9D                     PIE1            equ	3997	;# 
   117   000F9E                     PIR1            equ	3998	;# 
   118   000F9F                     IPR1            equ	3999	;# 
   119   000FA0                     PIE2            equ	4000	;# 
   120   000FA1                     PIR2            equ	4001	;# 
   121   000FA2                     IPR2            equ	4002	;# 
   122   000FA6                     EECON1          equ	4006	;# 
   123   000FA7                     EECON2          equ	4007	;# 
   124   000FA8                     EEDATA          equ	4008	;# 
   125   000FA9                     EEADR           equ	4009	;# 
   126   000FAB                     RCSTA           equ	4011	;# 
   127   000FAB                     RCSTA1          equ	4011	;# 
   128   000FAC                     TXSTA           equ	4012	;# 
   129   000FAC                     TXSTA1          equ	4012	;# 
   130   000FAD                     TXREG           equ	4013	;# 
   131   000FAD                     TXREG1          equ	4013	;# 
   132   000FAE                     RCREG           equ	4014	;# 
   133   000FAE                     RCREG1          equ	4014	;# 
   134   000FAF                     SPBRG           equ	4015	;# 
   135   000FAF                     SPBRG1          equ	4015	;# 
   136   000FB0                     SPBRGH          equ	4016	;# 
   137   000FB1                     T3CON           equ	4017	;# 
   138   000FB2                     TMR3            equ	4018	;# 
   139   000FB2                     TMR3L           equ	4018	;# 
   140   000FB3                     TMR3H           equ	4019	;# 
   141   000FB4                     CMCON           equ	4020	;# 
   142   000FB5                     CVRCON          equ	4021	;# 
   143   000FB6                     ECCP1AS         equ	4022	;# 
   144   000FB6                     ECCPAS          equ	4022	;# 
   145   000FB7                     PWM1CON         equ	4023	;# 
   146   000FB7                     ECCP1DEL        equ	4023	;# 
   147   000FB8                     BAUDCON         equ	4024	;# 
   148   000FB8                     BAUDCTL         equ	4024	;# 
   149   000FBA                     CCP2CON         equ	4026	;# 
   150   000FBB                     CCPR2           equ	4027	;# 
   151   000FBB                     CCPR2L          equ	4027	;# 
   152   000FBC                     CCPR2H          equ	4028	;# 
   153   000FBD                     CCP1CON         equ	4029	;# 
   154   000FBE                     CCPR1           equ	4030	;# 
   155   000FBE                     CCPR1L          equ	4030	;# 
   156   000FBF                     CCPR1H          equ	4031	;# 
   157   000FC0                     ADCON2          equ	4032	;# 
   158   000FC1                     ADCON1          equ	4033	;# 
   159   000FC2                     ADCON0          equ	4034	;# 
   160   000FC3                     ADRES           equ	4035	;# 
   161   000FC3                     ADRESL          equ	4035	;# 
   162   000FC4                     ADRESH          equ	4036	;# 
   163   000FC5                     SSPCON2         equ	4037	;# 
   164   000FC6                     SSPCON1         equ	4038	;# 
   165   000FC7                     SSPSTAT         equ	4039	;# 
   166   000FC8                     SSPADD          equ	4040	;# 
   167   000FC9                     SSPBUF          equ	4041	;# 
   168   000FCA                     T2CON           equ	4042	;# 
   169   000FCB                     PR2             equ	4043	;# 
   170   000FCB                     MEMCON          equ	4043	;# 
   171   000FCC                     TMR2            equ	4044	;# 
   172   000FCD                     T1CON           equ	4045	;# 
   173   000FCE                     TMR1            equ	4046	;# 
   174   000FCE                     TMR1L           equ	4046	;# 
   175   000FCF                     TMR1H           equ	4047	;# 
   176   000FD0                     RCON            equ	4048	;# 
   177   000FD1                     WDTCON          equ	4049	;# 
   178   000FD2                     HLVDCON         equ	4050	;# 
   179   000FD2                     LVDCON          equ	4050	;# 
   180   000FD3                     OSCCON          equ	4051	;# 
   181   000FD5                     T0CON           equ	4053	;# 
   182   000FD6                     TMR0            equ	4054	;# 
   183   000FD6                     TMR0L           equ	4054	;# 
   184   000FD7                     TMR0H           equ	4055	;# 
   185   000FD8                     STATUS          equ	4056	;# 
   186   000FD9                     FSR2            equ	4057	;# 
   187   000FD9                     FSR2L           equ	4057	;# 
   188   000FDA                     FSR2H           equ	4058	;# 
   189   000FDB                     PLUSW2          equ	4059	;# 
   190   000FDC                     PREINC2         equ	4060	;# 
   191   000FDD                     POSTDEC2        equ	4061	;# 
   192   000FDE                     POSTINC2        equ	4062	;# 
   193   000FDF                     INDF2           equ	4063	;# 
   194   000FE0                     BSR             equ	4064	;# 
   195   000FE1                     FSR1            equ	4065	;# 
   196   000FE1                     FSR1L           equ	4065	;# 
   197   000FE2                     FSR1H           equ	4066	;# 
   198   000FE3                     PLUSW1          equ	4067	;# 
   199   000FE4                     PREINC1         equ	4068	;# 
   200   000FE5                     POSTDEC1        equ	4069	;# 
   201   000FE6                     POSTINC1        equ	4070	;# 
   202   000FE7                     INDF1           equ	4071	;# 
   203   000FE8                     WREG            equ	4072	;# 
   204   000FE9                     FSR0            equ	4073	;# 
   205   000FE9                     FSR0L           equ	4073	;# 
   206   000FEA                     FSR0H           equ	4074	;# 
   207   000FEB                     PLUSW0          equ	4075	;# 
   208   000FEC                     PREINC0         equ	4076	;# 
   209   000FED                     POSTDEC0        equ	4077	;# 
   210   000FEE                     POSTINC0        equ	4078	;# 
   211   000FEF                     INDF0           equ	4079	;# 
   212   000FF0                     INTCON3         equ	4080	;# 
   213   000FF1                     INTCON2         equ	4081	;# 
   214   000FF2                     INTCON          equ	4082	;# 
   215   000FF3                     PROD            equ	4083	;# 
   216   000FF3                     PRODL           equ	4083	;# 
   217   000FF4                     PRODH           equ	4084	;# 
   218   000FF5                     TABLAT          equ	4085	;# 
   219   000FF6                     TBLPTR          equ	4086	;# 
   220   000FF6                     TBLPTRL         equ	4086	;# 
   221   000FF7                     TBLPTRH         equ	4087	;# 
   222   000FF8                     TBLPTRU         equ	4088	;# 
   223   000FF9                     PCLAT           equ	4089	;# 
   224   000FF9                     PC              equ	4089	;# 
   225   000FF9                     PCL             equ	4089	;# 
   226   000FFA                     PCLATH          equ	4090	;# 
   227   000FFB                     PCLATU          equ	4091	;# 
   228   000FFC                     STKPTR          equ	4092	;# 
   229   000FFD                     TOS             equ	4093	;# 
   230   000FFD                     TOSL            equ	4093	;# 
   231   000FFE                     TOSH            equ	4094	;# 
   232   000FFF                     TOSU            equ	4095	;# 
   233   000F8C                     _LATD           set	3980
   234   000F8B                     _LATC           set	3979
   235   000F95                     _TRISDbits      set	3989
   236   000F93                     _TRISBbits      set	3987
   237   000F94                     _TRISCbits      set	3988
   238   000F92                     _TRISAbits      set	3986
   239   000FC3                     _ADRESL         set	4035
   240   000FC4                     _ADRESH         set	4036
   241   000FD0                     _RCONbits       set	4048
   242   000F9E                     _PIR1bits       set	3998
   243   000F9D                     _PIE1bits       set	3997
   244   000FBB                     _CCPR2L         set	4027
   245   000FBE                     _CCPR1L         set	4030
   246   000FCB                     _PR2            set	4043
   247   000FCA                     _T2CON          set	4042
   248   000FBA                     _CCP2CONbits    set	4026
   249   000FBD                     _CCP1CONbits    set	4029
   250   000FCA                     _T2CONbits      set	4042
   251   000FC0                     _ADCON2bits     set	4032
   252   000FC2                     _ADCON0bits     set	4034
   253   000FC1                     _ADCON1bits     set	4033
   254   000FD3                     _OSCCONbits     set	4051
   255   000FF2                     _INTCONbits     set	4082
   256                           
   257                           ; #config settings
   258                           
   259                           	psect	cinit
   260   000954                     __pcinit:
   261                           	callstack 0
   262   000954                     start_initialization:
   263                           	callstack 0
   264   000954                     __initialization:
   265                           	callstack 0
   266                           
   267                           ; Clear objects allocated to COMRAM (6 bytes)
   268   000954  6A12               	clrf	(__pbssCOMRAM+5)& (0+255),c
   269   000956  6A11               	clrf	(__pbssCOMRAM+4)& (0+255),c
   270   000958  6A10               	clrf	(__pbssCOMRAM+3)& (0+255),c
   271   00095A  6A0F               	clrf	(__pbssCOMRAM+2)& (0+255),c
   272   00095C  6A0E               	clrf	(__pbssCOMRAM+1)& (0+255),c
   273   00095E  6A0D               	clrf	__pbssCOMRAM& (0+255),c
   274   000960                     end_of_initialization:
   275                           	callstack 0
   276   000960                     __end_of__initialization:
   277                           	callstack 0
   278   000960  9013               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   279   000962  9213               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   280   000964  0100               	movlb	0
   281   000966  EF32  F004         	goto	_main	;jump to C main() function
   282                           
   283                           	psect	bssCOMRAM
   284   00000D                     __pbssCOMRAM:
   285                           	callstack 0
   286   00000D                     _y:
   287                           	callstack 0
   288   00000D                     	ds	2
   289   00000F                     _x:
   290                           	callstack 0
   291   00000F                     	ds	2
   292   000011                     _i:
   293                           	callstack 0
   294   000011                     	ds	2
   295                           
   296                           	psect	cstackCOMRAM
   297   000001                     __pcstackCOMRAM:
   298                           	callstack 0
   299   000001                     setServoPosition1@dutyCycle:
   300                           	callstack 0
   301   000001                     setServoPosition2@dutyCycle:
   302                           	callstack 0
   303                           
   304                           ; 2 bytes @ 0x0
   305   000001                     	ds	2
   306   000003                     ??_setServoPosition1:
   307   000003                     ??_setServoPosition2:
   308                           
   309                           ; 1 bytes @ 0x2
   310   000003                     	ds	2
   311   000005                     ??_ISR:
   312                           
   313                           ; 1 bytes @ 0x4
   314   000005                     	ds	2
   315   000007                     ISR@i:
   316                           	callstack 0
   317                           
   318                           ; 2 bytes @ 0x6
   319   000007                     	ds	2
   320   000009                     ISR@i_778:
   321                           	callstack 0
   322                           
   323                           ; 2 bytes @ 0x8
   324   000009                     	ds	2
   325   00000B                     ISR@value:
   326                           	callstack 0
   327                           
   328                           ; 2 bytes @ 0xA
   329   00000B                     	ds	2
   330   00000D                     
   331                           ; 1 bytes @ 0xC
   332 ;;
   333 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   334 ;;
   335 ;; *************** function _main *****************
   336 ;; Defined at:
   337 ;;		line 22 in file "move.c"
   338 ;; Parameters:    Size  Location     Type
   339 ;;		None
   340 ;; Auto vars:     Size  Location     Type
   341 ;;		None
   342 ;; Return value:  Size  Location     Type
   343 ;;                  1    wreg      void 
   344 ;; Registers used:
   345 ;;		wreg, status,2
   346 ;; Tracked objects:
   347 ;;		On entry : 0/0
   348 ;;		On exit  : 0/0
   349 ;;		Unchanged: 0/0
   350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   351 ;;      Params:         0       0       0       0       0       0       0
   352 ;;      Locals:         0       0       0       0       0       0       0
   353 ;;      Temps:          0       0       0       0       0       0       0
   354 ;;      Totals:         0       0       0       0       0       0       0
   355 ;;Total ram usage:        0 bytes
   356 ;; Hardware stack levels required when called: 2
   357 ;; This function calls:
   358 ;;		Nothing
   359 ;; This function is called by:
   360 ;;		Startup code after reset
   361 ;; This function uses a non-reentrant model
   362 ;;
   363                           
   364                           	psect	text0
   365   000864                     __ptext0:
   366                           	callstack 0
   367   000864                     _main:
   368                           	callstack 29
   369   000864                     
   370                           ;move.c: 25:     ADCON0bits.CHS = 0b0000;
   371   000864  50D3               	movf	211,w,c	;volatile
   372   000866  0B8F               	andlw	-113
   373   000868  0910               	iorlw	16
   374   00086A  6ED3               	movwf	211,c	;volatile
   375   00086C                     
   376                           ;move.c: 28:     ADCON2bits.ADCS = 0b010;
   377   00086C  8092               	bsf	146,0,c	;volatile
   378   00086E                     
   379                           ;move.c: 29:     ADCON2bits.ACQT = 0b001;
   380   00086E  8292               	bsf	146,1,c	;volatile
   381   000870                     
   382                           ;move.c: 30:     ADCON0bits.ADON = 1;
   383   000870  9494               	bcf	148,2,c	;volatile
   384   000872                     
   385                           ;move.c: 31:     ADCON2bits.ADFM = 1;
   386   000872  9294               	bcf	148,1,c	;volatile
   387   000874                     
   388                           ;move.c: 32:     ADCON0bits.GO = 1;
   389   000874  8093               	bsf	147,0,c	;volatile
   390   000876                     
   391                           ;move.c: 33: 
   392   000876  9095               	bcf	149,0,c	;volatile
   393   000878                     
   394                           ;move.c: 34: 
   395   000878  6A8B               	clrf	139,c	;volatile
   396   00087A                     
   397                           ;move.c: 35:     T2CONbits.TMR2ON = 1;
   398   00087A  6A8C               	clrf	140,c	;volatile
   399                           
   400                           ;move.c: 37:     CCP1CONbits.CCP1M = 0b1100;
   401   00087C  50C1               	movf	193,w,c	;volatile
   402   00087E  0BF0               	andlw	-16
   403   000880  090D               	iorlw	13
   404   000882  6EC1               	movwf	193,c	;volatile
   405                           
   406                           ;move.c: 38:     CCP2CONbits.CCP2M = 0b1100;
   407   000884  0EC3               	movlw	-61
   408   000886  16C2               	andwf	194,f,c	;volatile
   409   000888                     
   410                           ;move.c: 39:     T2CON = 0b00000101;
   411   000888  98C1               	bcf	193,4,c	;volatile
   412   00088A                     
   413                           ;move.c: 40:     PR2 = 0x9B;
   414   00088A  9AC1               	bcf	193,5,c	;volatile
   415                           
   416                           ;move.c: 41:     CCPR1L = 0;
   417   00088C  50C0               	movf	192,w,c	;volatile
   418   00088E  0BF8               	andlw	-8
   419   000890  0902               	iorlw	2
   420   000892  6EC0               	movwf	192,c	;volatile
   421                           
   422                           ;move.c: 42:     CCPR2L = 0;
   423   000894  50C0               	movf	192,w,c	;volatile
   424   000896  0BC7               	andlw	-57
   425   000898  0908               	iorlw	8
   426   00089A  6EC0               	movwf	192,c	;volatile
   427   00089C                     
   428                           ;move.c: 43: 
   429   00089C  80C2               	bsf	194,0,c	;volatile
   430   00089E                     
   431                           ;move.c: 44: 
   432   00089E  8EC0               	bsf	192,7,c	;volatile
   433   0008A0                     
   434                           ;move.c: 45:     PIE1bits.ADIE = 1;
   435   0008A0  82C2               	bsf	194,1,c	;volatile
   436   0008A2                     
   437                           ;move.c: 48:     INTCONbits.PEIE = 1;
   438   0008A2  84CA               	bsf	202,2,c	;volatile
   439                           
   440                           ;move.c: 49:     INTCONbits.INT0IE = 1;
   441   0008A4  50CA               	movf	202,w,c	;volatile
   442   0008A6  0BFC               	andlw	-4
   443   0008A8  0901               	iorlw	1
   444   0008AA  6ECA               	movwf	202,c	;volatile
   445                           
   446                           ;move.c: 50:     INTCONbits.INT0IF = 0;
   447   0008AC  50BD               	movf	189,w,c	;volatile
   448   0008AE  0BF0               	andlw	-16
   449   0008B0  090C               	iorlw	12
   450   0008B2  6EBD               	movwf	189,c	;volatile
   451                           
   452                           ;move.c: 51:     RCONbits.IPEN = 1;
   453   0008B4  50BA               	movf	186,w,c	;volatile
   454   0008B6  0BF0               	andlw	-16
   455   0008B8  090C               	iorlw	12
   456   0008BA  6EBA               	movwf	186,c	;volatile
   457                           
   458                           ;move.c: 52:     INTCONbits.GIEH = 1;
   459   0008BC  0E05               	movlw	5
   460   0008BE  6ECA               	movwf	202,c	;volatile
   461                           
   462                           ;move.c: 53:     INTCONbits.GIEL = 1;
   463   0008C0  0E9B               	movlw	155
   464   0008C2  6ECB               	movwf	203,c	;volatile
   465   0008C4                     
   466                           ;move.c: 54:     INTCONbits.TMR0IF=0;
   467   0008C4  6ABE               	clrf	190,c	;volatile
   468   0008C6                     
   469                           ;move.c: 55:     INTCONbits.TMR0IE=1;
   470   0008C6  6ABB               	clrf	187,c	;volatile
   471   0008C8  8C9D               	bsf	157,6,c	;volatile
   472   0008CA  9C9E               	bcf	158,6,c	;volatile
   473   0008CC  8EF2               	bsf	242,7,c	;volatile
   474   0008CE  8CF2               	bsf	242,6,c	;volatile
   475   0008D0  88F2               	bsf	242,4,c	;volatile
   476   0008D2  92F2               	bcf	242,1,c	;volatile
   477   0008D4  8ED0               	bsf	208,7,c	;volatile
   478   0008D6  8EF2               	bsf	242,7,c	;volatile
   479   0008D8  8CF2               	bsf	242,6,c	;volatile
   480   0008DA  94F2               	bcf	242,2,c	;volatile
   481   0008DC  8AF2               	bsf	242,5,c	;volatile
   482   0008DE  8ED0               	bsf	208,7,c	;volatile
   483   0008E0                     l831:
   484                           
   485                           ;move.c: 81:          if (ADCON0bits.GO == 0) ADCON0bits.GO = 1;
   486   0008E0  B2C2               	btfsc	194,1,c	;volatile
   487   0008E2  EF75  F004         	goto	u11
   488   0008E6  EF77  F004         	goto	u10
   489   0008EA                     u11:
   490   0008EA  EF70  F004         	goto	l831
   491   0008EE                     u10:
   492   0008EE  82C2               	bsf	194,1,c	;volatile
   493   0008F0  EF70  F004         	goto	l831
   494   0008F4  EF07  F000         	goto	start
   495   0008F8                     __end_of_main:
   496                           	callstack 0
   497                           
   498 ;; *************** function _ISR *****************
   499 ;; Defined at:
   500 ;;		line 98 in file "move.c"
   501 ;; Parameters:    Size  Location     Type
   502 ;;		None
   503 ;; Auto vars:     Size  Location     Type
   504 ;;  i               2    8[COMRAM] int 
   505 ;;  i               2    6[COMRAM] int 
   506 ;;  value           2   10[COMRAM] int 
   507 ;; Return value:  Size  Location     Type
   508 ;;                  1    wreg      void 
   509 ;; Registers used:
   510 ;;		wreg, status,2, status,0, cstack
   511 ;; Tracked objects:
   512 ;;		On entry : 0/0
   513 ;;		On exit  : 0/0
   514 ;;		Unchanged: 0/0
   515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   516 ;;      Params:         0       0       0       0       0       0       0
   517 ;;      Locals:         6       0       0       0       0       0       0
   518 ;;      Temps:          2       0       0       0       0       0       0
   519 ;;      Totals:         8       0       0       0       0       0       0
   520 ;;Total ram usage:        8 bytes
   521 ;; Hardware stack levels used: 1
   522 ;; Hardware stack levels required when called: 1
   523 ;; This function calls:
   524 ;;		_setServoPosition1
   525 ;;		_setServoPosition2
   526 ;; This function is called by:
   527 ;;		Interrupt level 2
   528 ;; This function uses a non-reentrant model
   529 ;;
   530                           
   531                           	psect	intcode
   532   000008                     __pintcode:
   533                           	callstack 0
   534   000008                     _ISR:
   535                           	callstack 29
   536                           
   537                           ;incstack = 0
   538   000008  8213               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
   539   00000A  ED01  F003         	call	int_func,f	;refresh shadow registers
   540                           
   541                           	psect	intcode_body
   542   000602                     __pintcode_body:
   543                           	callstack 29
   544   000602                     int_func:
   545                           	callstack 29
   546   000602  0006               	pop		; remove dummy address from shadow register refresh
   547   000604                     
   548                           ;move.c: 100:     if (INTCONbits.INT0IF)
   549   000604  A2F2               	btfss	242,1,c	;volatile
   550   000606  EF07  F003         	goto	i2u11_41
   551   00060A  EF09  F003         	goto	i2u11_40
   552   00060E                     i2u11_41:
   553   00060E  EF78  F003         	goto	i2l74
   554   000612                     i2u11_40:
   555   000612                     
   556                           ;move.c: 101:     {;move.c: 102:         LATD=0;
   557   000612  6A8C               	clrf	140,c	;volatile
   558   000614                     
   559                           ;move.c: 103:         _delay((unsigned long)((10.5 * 1000)*(125000/4000.0)));;
   560   000614  0E02               	movlw	2
   561   000616  6E06               	movwf	(??_ISR+1)^0,c
   562   000618  0EAB               	movlw	171
   563   00061A  6E05               	movwf	??_ISR^0,c
   564   00061C  0E1F               	movlw	31
   565   00061E                     i2u20_47:
   566   00061E  2EE8               	decfsz	wreg,f,c
   567   000620  D7FE               	bra	i2u20_47
   568   000622  2E05               	decfsz	??_ISR^0,f,c
   569   000624  D7FC               	bra	i2u20_47
   570   000626  2E06               	decfsz	(??_ISR+1)^0,f,c
   571   000628  D7FA               	bra	i2u20_47
   572   00062A  D000               	nop2	
   573   00062C                     
   574                           ;move.c: 104:         for(int i=0;i<x;i++){
   575   00062C  0E00               	movlw	0
   576   00062E  6E08               	movwf	(ISR@i+1)^0,c
   577   000630  0E00               	movlw	0
   578   000632  6E07               	movwf	ISR@i^0,c
   579   000634  EF2B  F003         	goto	i2l943
   580   000638                     i2l937:
   581                           
   582                           ;move.c: 105:             setServoPosition2(56);
   583   000638  0E00               	movlw	0
   584   00063A  6E02               	movwf	(setServoPosition2@dutyCycle+1)^0,c
   585   00063C  0E38               	movlw	56
   586   00063E  6E01               	movwf	setServoPosition2@dutyCycle^0,c
   587   000640  EC7C  F004         	call	_setServoPosition2	;wreg free
   588   000644                     
   589                           ;move.c: 106:             _delay((unsigned long)((0.18 * 1000)*(125000/4000.0)));;
   590   000644  0E08               	movlw	8
   591   000646  6E05               	movwf	??_ISR^0,c
   592   000648  0E4D               	movlw	77
   593   00064A                     i2u21_47:
   594   00064A  2EE8               	decfsz	wreg,f,c
   595   00064C  D7FE               	bra	i2u21_47
   596   00064E  2E05               	decfsz	??_ISR^0,f,c
   597   000650  D7FC               	bra	i2u21_47
   598   000652                     
   599                           ;move.c: 107:         }
   600   000652  4A07               	infsnz	ISR@i^0,f,c
   601   000654  2A08               	incf	(ISR@i+1)^0,f,c
   602   000656                     i2l943:
   603   000656  500F               	movf	_x^0,w,c
   604   000658  5C07               	subwf	ISR@i^0,w,c
   605   00065A  5008               	movf	(ISR@i+1)^0,w,c
   606   00065C  0A80               	xorlw	128
   607   00065E  6E05               	movwf	??_ISR^0,c
   608   000660  5010               	movf	(_x+1)^0,w,c
   609   000662  0A80               	xorlw	128
   610   000664  5805               	subwfb	??_ISR^0,w,c
   611   000666  A0D8               	btfss	status,0,c
   612   000668  EF38  F003         	goto	i2u12_41
   613   00066C  EF3A  F003         	goto	i2u12_40
   614   000670                     i2u12_41:
   615   000670  EF1C  F003         	goto	i2l937
   616   000674                     i2u12_40:
   617   000674                     
   618                           ;move.c: 108:         setServoPosition2(46);
   619   000674  0E00               	movlw	0
   620   000676  6E02               	movwf	(setServoPosition2@dutyCycle+1)^0,c
   621   000678  0E2E               	movlw	46
   622   00067A  6E01               	movwf	setServoPosition2@dutyCycle^0,c
   623   00067C  EC7C  F004         	call	_setServoPosition2	;wreg free
   624   000680                     
   625                           ;move.c: 109:         x=0;
   626   000680  0E00               	movlw	0
   627   000682  6E10               	movwf	(_x+1)^0,c
   628   000684  0E00               	movlw	0
   629   000686  6E0F               	movwf	_x^0,c
   630   000688                     
   631                           ;move.c: 110:         for(int i=0;i<y;i++){
   632   000688  0E00               	movlw	0
   633   00068A  6E0A               	movwf	(ISR@i_778+1)^0,c
   634   00068C  0E00               	movlw	0
   635   00068E  6E09               	movwf	ISR@i_778^0,c
   636   000690  EF5A  F003         	goto	i2l957
   637   000694                     i2l951:
   638                           
   639                           ;move.c: 111:             setServoPosition1(36);
   640   000694  0E00               	movlw	0
   641   000696  6E02               	movwf	(setServoPosition1@dutyCycle+1)^0,c
   642   000698  0E24               	movlw	36
   643   00069A  6E01               	movwf	setServoPosition1@dutyCycle^0,c
   644   00069C  EC93  F004         	call	_setServoPosition1	;wreg free
   645   0006A0                     
   646                           ;move.c: 112:             _delay((unsigned long)((0.179 * 1000)*(125000/4000.0)));;
   647   0006A0  0E08               	movlw	8
   648   0006A2  6E05               	movwf	??_ISR^0,c
   649   0006A4  0E42               	movlw	66
   650   0006A6                     i2u22_47:
   651   0006A6  2EE8               	decfsz	wreg,f,c
   652   0006A8  D7FE               	bra	i2u22_47
   653   0006AA  2E05               	decfsz	??_ISR^0,f,c
   654   0006AC  D7FC               	bra	i2u22_47
   655   0006AE  0000               	nop	
   656   0006B0                     
   657                           ;move.c: 113:         }
   658   0006B0  4A09               	infsnz	ISR@i_778^0,f,c
   659   0006B2  2A0A               	incf	(ISR@i_778+1)^0,f,c
   660   0006B4                     i2l957:
   661   0006B4  500D               	movf	_y^0,w,c
   662   0006B6  5C09               	subwf	ISR@i_778^0,w,c
   663   0006B8  500A               	movf	(ISR@i_778+1)^0,w,c
   664   0006BA  0A80               	xorlw	128
   665   0006BC  6E05               	movwf	??_ISR^0,c
   666   0006BE  500E               	movf	(_y+1)^0,w,c
   667   0006C0  0A80               	xorlw	128
   668   0006C2  5805               	subwfb	??_ISR^0,w,c
   669   0006C4  A0D8               	btfss	status,0,c
   670   0006C6  EF67  F003         	goto	i2u13_41
   671   0006CA  EF69  F003         	goto	i2u13_40
   672   0006CE                     i2u13_41:
   673   0006CE  EF4A  F003         	goto	i2l951
   674   0006D2                     i2u13_40:
   675   0006D2                     
   676                           ;move.c: 114:         setServoPosition1(46);
   677   0006D2  0E00               	movlw	0
   678   0006D4  6E02               	movwf	(setServoPosition1@dutyCycle+1)^0,c
   679   0006D6  0E2E               	movlw	46
   680   0006D8  6E01               	movwf	setServoPosition1@dutyCycle^0,c
   681   0006DA  EC93  F004         	call	_setServoPosition1	;wreg free
   682   0006DE                     
   683                           ;move.c: 115:         y=0;
   684   0006DE  0E00               	movlw	0
   685   0006E0  6E0E               	movwf	(_y+1)^0,c
   686   0006E2  0E00               	movlw	0
   687   0006E4  6E0D               	movwf	_y^0,c
   688   0006E6                     
   689                           ;move.c: 116:         LATD=1;
   690   0006E6  0E01               	movlw	1
   691   0006E8  6E8C               	movwf	140,c	;volatile
   692   0006EA                     
   693                           ;move.c: 117:         INTCONbits.INT0IF = 0;
   694   0006EA  92F2               	bcf	242,1,c	;volatile
   695                           
   696                           ;move.c: 119:     }
   697   0006EC  EF30  F004         	goto	i2l93
   698   0006F0                     i2l74:
   699   0006F0  AC9E               	btfss	158,6,c	;volatile
   700   0006F2  EF7D  F003         	goto	i2u14_41
   701   0006F6  EF7F  F003         	goto	i2u14_40
   702   0006FA                     i2u14_41:
   703   0006FA  EF30  F004         	goto	i2l93
   704   0006FE                     i2u14_40:
   705   0006FE                     
   706                           ;move.c: 121:         int value = (ADRESH << 8) + ADRESL;
   707   0006FE  50C4               	movf	196,w,c	;volatile
   708   000700  6E06               	movwf	(??_ISR+1)^0,c
   709   000702  6A05               	clrf	??_ISR^0,c
   710   000704  50C3               	movf	195,w,c	;volatile
   711   000706  2405               	addwf	??_ISR^0,w,c
   712   000708  6E0B               	movwf	ISR@value^0,c
   713   00070A  0E00               	movlw	0
   714   00070C  2006               	addwfc	(??_ISR+1)^0,w,c
   715   00070E  6E0C               	movwf	(ISR@value+1)^0,c
   716   000710                     
   717                           ;move.c: 122:         _delay((unsigned long)((5)*(125000/4000.0)));
   718   000710  0E34               	movlw	52
   719   000712                     i2u23_47:
   720   000712  2EE8               	decfsz	wreg,f,c
   721   000714  D7FE               	bra	i2u23_47
   722   000716                     
   723                           ;move.c: 123:         if(i==0){
   724   000716  5011               	movf	_i^0,w,c
   725   000718  1012               	iorwf	(_i+1)^0,w,c
   726   00071A  A4D8               	btfss	status,2,c
   727   00071C  EF92  F003         	goto	i2u15_41
   728   000720  EF94  F003         	goto	i2u15_40
   729   000724                     i2u15_41:
   730   000724  EFE3  F003         	goto	i2l995
   731   000728                     i2u15_40:
   732   000728                     
   733                           ;move.c: 124:             i=1;
   734   000728  0E00               	movlw	0
   735   00072A  6E12               	movwf	(_i+1)^0,c
   736   00072C  0E01               	movlw	1
   737   00072E  6E11               	movwf	_i^0,c
   738   000730                     
   739                           ;move.c: 125:                 if(value > 800){
   740   000730  BE0C               	btfsc	(ISR@value+1)^0,7,c
   741   000732  EFA4  F003         	goto	i2u16_41
   742   000736  0E21               	movlw	33
   743   000738  5C0B               	subwf	ISR@value^0,w,c
   744   00073A  0E03               	movlw	3
   745   00073C  580C               	subwfb	(ISR@value+1)^0,w,c
   746   00073E  A0D8               	btfss	status,0,c
   747   000740  EFA4  F003         	goto	i2u16_41
   748   000744  EFA6  F003         	goto	i2u16_40
   749   000748                     i2u16_41:
   750   000748  EFB7  F003         	goto	i2l983
   751   00074C                     i2u16_40:
   752   00074C                     
   753                           ;move.c: 126:                     setServoPosition2(36);
   754   00074C  0E00               	movlw	0
   755   00074E  6E02               	movwf	(setServoPosition2@dutyCycle+1)^0,c
   756   000750  0E24               	movlw	36
   757   000752  6E01               	movwf	setServoPosition2@dutyCycle^0,c
   758   000754  EC7C  F004         	call	_setServoPosition2	;wreg free
   759   000758                     
   760                           ;move.c: 127:                     _delay((unsigned long)((0.15 * 1000)*(125000/4000.0)))
      +                          ;;
   761   000758  0E07               	movlw	7
   762   00075A  6E05               	movwf	??_ISR^0,c
   763   00075C  0E15               	movlw	21
   764   00075E                     i2u24_47:
   765   00075E  2EE8               	decfsz	wreg,f,c
   766   000760  D7FE               	bra	i2u24_47
   767   000762  2E05               	decfsz	??_ISR^0,f,c
   768   000764  D7FC               	bra	i2u24_47
   769   000766                     
   770                           ;move.c: 128:                     x++;
   771   000766  4A0F               	infsnz	_x^0,f,c
   772   000768  2A10               	incf	(_x+1)^0,f,c
   773                           
   774                           ;move.c: 129:                 }
   775   00076A  EFDD  F003         	goto	i2l993
   776   00076E                     i2l983:
   777   00076E  BE0C               	btfsc	(ISR@value+1)^0,7,c
   778   000770  EFC5  F003         	goto	i2u17_40
   779   000774  500C               	movf	(ISR@value+1)^0,w,c
   780   000776  E107               	bnz	i2u17_41
   781   000778  0EC8               	movlw	200
   782   00077A  5C0B               	subwf	ISR@value^0,w,c
   783   00077C  B0D8               	btfsc	status,0,c
   784   00077E  EFC3  F003         	goto	i2u17_41
   785   000782  EFC5  F003         	goto	i2u17_40
   786   000786                     i2u17_41:
   787   000786  EFD7  F003         	goto	i2l991
   788   00078A                     i2u17_40:
   789   00078A                     
   790                           ;move.c: 131:                     setServoPosition2(56);
   791   00078A  0E00               	movlw	0
   792   00078C  6E02               	movwf	(setServoPosition2@dutyCycle+1)^0,c
   793   00078E  0E38               	movlw	56
   794   000790  6E01               	movwf	setServoPosition2@dutyCycle^0,c
   795   000792  EC7C  F004         	call	_setServoPosition2	;wreg free
   796   000796                     
   797                           ;move.c: 132:                     _delay((unsigned long)((0.169 * 1000)*(125000/4000.0))
      +                          );;
   798   000796  0E07               	movlw	7
   799   000798  6E05               	movwf	??_ISR^0,c
   800   00079A  0EDB               	movlw	219
   801   00079C                     i2u25_47:
   802   00079C  2EE8               	decfsz	wreg,f,c
   803   00079E  D7FE               	bra	i2u25_47
   804   0007A0  2E05               	decfsz	??_ISR^0,f,c
   805   0007A2  D7FC               	bra	i2u25_47
   806   0007A4                     
   807                           ;move.c: 133:                     x--;
   808   0007A4  060F               	decf	_x^0,f,c
   809   0007A6  A0D8               	btfss	status,0,c
   810   0007A8  0610               	decf	(_x+1)^0,f,c
   811                           
   812                           ;move.c: 134:                 }
   813   0007AA  EFDD  F003         	goto	i2l993
   814   0007AE                     i2l991:
   815                           
   816                           ;move.c: 136:                     setServoPosition2(46);
   817   0007AE  0E00               	movlw	0
   818   0007B0  6E02               	movwf	(setServoPosition2@dutyCycle+1)^0,c
   819   0007B2  0E2E               	movlw	46
   820   0007B4  6E01               	movwf	setServoPosition2@dutyCycle^0,c
   821   0007B6  EC7C  F004         	call	_setServoPosition2	;wreg free
   822   0007BA                     i2l993:
   823                           
   824                           ;move.c: 138:             ADCON0bits.CHS = 0b0001;
   825   0007BA  50C2               	movf	194,w,c	;volatile
   826   0007BC  0BC3               	andlw	-61
   827   0007BE  0904               	iorlw	4
   828   0007C0  6EC2               	movwf	194,c	;volatile
   829                           
   830                           ;move.c: 139:         }
   831   0007C2  EF2F  F004         	goto	i2l1017
   832   0007C6                     i2l995:
   833                           
   834                           ;move.c: 141:             i=0;
   835   0007C6  0E00               	movlw	0
   836   0007C8  6E12               	movwf	(_i+1)^0,c
   837   0007CA  0E00               	movlw	0
   838   0007CC  6E11               	movwf	_i^0,c
   839   0007CE                     
   840                           ;move.c: 142:                 if(value >800){
   841   0007CE  BE0C               	btfsc	(ISR@value+1)^0,7,c
   842   0007D0  EFF3  F003         	goto	i2u18_41
   843   0007D4  0E21               	movlw	33
   844   0007D6  5C0B               	subwf	ISR@value^0,w,c
   845   0007D8  0E03               	movlw	3
   846   0007DA  580C               	subwfb	(ISR@value+1)^0,w,c
   847   0007DC  A0D8               	btfss	status,0,c
   848   0007DE  EFF3  F003         	goto	i2u18_41
   849   0007E2  EFF5  F003         	goto	i2u18_40
   850   0007E6                     i2u18_41:
   851   0007E6  EF06  F004         	goto	i2l1005
   852   0007EA                     i2u18_40:
   853   0007EA                     
   854                           ;move.c: 143:                     setServoPosition1(56);
   855   0007EA  0E00               	movlw	0
   856   0007EC  6E02               	movwf	(setServoPosition1@dutyCycle+1)^0,c
   857   0007EE  0E38               	movlw	56
   858   0007F0  6E01               	movwf	setServoPosition1@dutyCycle^0,c
   859   0007F2  EC93  F004         	call	_setServoPosition1	;wreg free
   860   0007F6                     
   861                           ;move.c: 144:                     _delay((unsigned long)((0.169 * 1000)*(125000/4000.0))
      +                          );;
   862   0007F6  0E07               	movlw	7
   863   0007F8  6E05               	movwf	??_ISR^0,c
   864   0007FA  0EDB               	movlw	219
   865   0007FC                     i2u26_47:
   866   0007FC  2EE8               	decfsz	wreg,f,c
   867   0007FE  D7FE               	bra	i2u26_47
   868   000800  2E05               	decfsz	??_ISR^0,f,c
   869   000802  D7FC               	bra	i2u26_47
   870   000804                     
   871                           ;move.c: 145:                     y++;
   872   000804  4A0D               	infsnz	_y^0,f,c
   873   000806  2A0E               	incf	(_y+1)^0,f,c
   874                           
   875                           ;move.c: 146:                 }else if(value <200){
   876   000808  EF2D  F004         	goto	i2l1015
   877   00080C                     i2l1005:
   878   00080C  BE0C               	btfsc	(ISR@value+1)^0,7,c
   879   00080E  EF14  F004         	goto	i2u19_40
   880   000812  500C               	movf	(ISR@value+1)^0,w,c
   881   000814  E107               	bnz	i2u19_41
   882   000816  0EC8               	movlw	200
   883   000818  5C0B               	subwf	ISR@value^0,w,c
   884   00081A  B0D8               	btfsc	status,0,c
   885   00081C  EF12  F004         	goto	i2u19_41
   886   000820  EF14  F004         	goto	i2u19_40
   887   000824                     i2u19_41:
   888   000824  EF27  F004         	goto	i2l1013
   889   000828                     i2u19_40:
   890   000828                     
   891                           ;move.c: 147:                     setServoPosition1(36);
   892   000828  0E00               	movlw	0
   893   00082A  6E02               	movwf	(setServoPosition1@dutyCycle+1)^0,c
   894   00082C  0E24               	movlw	36
   895   00082E  6E01               	movwf	setServoPosition1@dutyCycle^0,c
   896   000830  EC93  F004         	call	_setServoPosition1	;wreg free
   897   000834                     
   898                           ;move.c: 148:                     _delay((unsigned long)((0.16 * 1000)*(125000/4000.0)))
      +                          ;;
   899   000834  0E07               	movlw	7
   900   000836  6E05               	movwf	??_ISR^0,c
   901   000838  0E7D               	movlw	125
   902   00083A                     i2u27_47:
   903   00083A  2EE8               	decfsz	wreg,f,c
   904   00083C  D7FE               	bra	i2u27_47
   905   00083E  2E05               	decfsz	??_ISR^0,f,c
   906   000840  D7FC               	bra	i2u27_47
   907   000842  0000               	nop	
   908   000844                     
   909                           ;move.c: 149:                     y--;
   910   000844  060D               	decf	_y^0,f,c
   911   000846  A0D8               	btfss	status,0,c
   912   000848  060E               	decf	(_y+1)^0,f,c
   913                           
   914                           ;move.c: 150:                 }else{
   915   00084A  EF2D  F004         	goto	i2l1015
   916   00084E                     i2l1013:
   917                           
   918                           ;move.c: 151:                     setServoPosition1(46);
   919   00084E  0E00               	movlw	0
   920   000850  6E02               	movwf	(setServoPosition1@dutyCycle+1)^0,c
   921   000852  0E2E               	movlw	46
   922   000854  6E01               	movwf	setServoPosition1@dutyCycle^0,c
   923   000856  EC93  F004         	call	_setServoPosition1	;wreg free
   924   00085A                     i2l1015:
   925                           
   926                           ;move.c: 153:             ADCON0bits.CHS = 0b0000;
   927   00085A  0EC3               	movlw	-61
   928   00085C  16C2               	andwf	194,f,c	;volatile
   929   00085E                     i2l1017:
   930                           
   931                           ;move.c: 155:         PIR1bits.ADIF = 0;
   932   00085E  9C9E               	bcf	158,6,c	;volatile
   933   000860                     i2l93:
   934   000860  9213               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   935   000862  0011               	retfie		f
   936   000864                     __end_of_ISR:
   937                           	callstack 0
   938                           
   939 ;; *************** function _setServoPosition2 *****************
   940 ;; Defined at:
   941 ;;		line 90 in file "move.c"
   942 ;; Parameters:    Size  Location     Type
   943 ;;  dutyCycle       2    0[COMRAM] unsigned int 
   944 ;; Auto vars:     Size  Location     Type
   945 ;;		None
   946 ;; Return value:  Size  Location     Type
   947 ;;                  1    wreg      void 
   948 ;; Registers used:
   949 ;;		wreg, status,2, status,0
   950 ;; Tracked objects:
   951 ;;		On entry : 0/0
   952 ;;		On exit  : 0/0
   953 ;;		Unchanged: 0/0
   954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   955 ;;      Params:         2       0       0       0       0       0       0
   956 ;;      Locals:         0       0       0       0       0       0       0
   957 ;;      Temps:          2       0       0       0       0       0       0
   958 ;;      Totals:         4       0       0       0       0       0       0
   959 ;;Total ram usage:        4 bytes
   960 ;; Hardware stack levels used: 1
   961 ;; This function calls:
   962 ;;		Nothing
   963 ;; This function is called by:
   964 ;;		_ISR
   965 ;; This function uses a non-reentrant model
   966 ;;
   967                           
   968                           	psect	text2
   969   0008F8                     __ptext2:
   970                           	callstack 0
   971   0008F8                     _setServoPosition2:
   972                           	callstack 29
   973   0008F8                     
   974                           ;move.c: 90: void setServoPosition2(unsigned int dutyCycle);move.c: 91: {;move.c: 92:   
      +                            CCPR2L = dutyCycle >> 2;
   975   0008F8  C001  F003         	movff	setServoPosition2@dutyCycle,??_setServoPosition2
   976   0008FC  C002  F004         	movff	setServoPosition2@dutyCycle+1,??_setServoPosition2+1
   977   000900  90D8               	bcf	status,0,c
   978   000902  3204               	rrcf	(??_setServoPosition2+1)^0,f,c
   979   000904  3203               	rrcf	??_setServoPosition2^0,f,c
   980   000906  90D8               	bcf	status,0,c
   981   000908  3204               	rrcf	(??_setServoPosition2+1)^0,f,c
   982   00090A  3203               	rrcf	??_setServoPosition2^0,f,c
   983   00090C  5003               	movf	??_setServoPosition2^0,w,c
   984   00090E  6EBB               	movwf	187,c	;volatile
   985                           
   986                           ;move.c: 93:     CCP2CONbits.DC2B = dutyCycle & 0x03;
   987   000910  C001  F003         	movff	setServoPosition2@dutyCycle,??_setServoPosition2
   988   000914  0E03               	movlw	3
   989   000916  1603               	andwf	??_setServoPosition2^0,f,c
   990   000918  3A03               	swapf	??_setServoPosition2^0,f,c
   991   00091A  50BA               	movf	186,w,c	;volatile
   992   00091C  1803               	xorwf	??_setServoPosition2^0,w,c
   993   00091E  0BCF               	andlw	-49
   994   000920  1803               	xorwf	??_setServoPosition2^0,w,c
   995   000922  6EBA               	movwf	186,c	;volatile
   996   000924  0012               	return		;funcret
   997   000926                     __end_of_setServoPosition2:
   998                           	callstack 0
   999                           
  1000 ;; *************** function _setServoPosition1 *****************
  1001 ;; Defined at:
  1002 ;;		line 85 in file "move.c"
  1003 ;; Parameters:    Size  Location     Type
  1004 ;;  dutyCycle       2    0[COMRAM] unsigned int 
  1005 ;; Auto vars:     Size  Location     Type
  1006 ;;		None
  1007 ;; Return value:  Size  Location     Type
  1008 ;;                  1    wreg      void 
  1009 ;; Registers used:
  1010 ;;		wreg, status,2, status,0
  1011 ;; Tracked objects:
  1012 ;;		On entry : 0/0
  1013 ;;		On exit  : 0/0
  1014 ;;		Unchanged: 0/0
  1015 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1016 ;;      Params:         2       0       0       0       0       0       0
  1017 ;;      Locals:         0       0       0       0       0       0       0
  1018 ;;      Temps:          2       0       0       0       0       0       0
  1019 ;;      Totals:         4       0       0       0       0       0       0
  1020 ;;Total ram usage:        4 bytes
  1021 ;; Hardware stack levels used: 1
  1022 ;; This function calls:
  1023 ;;		Nothing
  1024 ;; This function is called by:
  1025 ;;		_ISR
  1026 ;; This function uses a non-reentrant model
  1027 ;;
  1028                           
  1029                           	psect	text3
  1030   000926                     __ptext3:
  1031                           	callstack 0
  1032   000926                     _setServoPosition1:
  1033                           	callstack 29
  1034   000926                     
  1035                           ;move.c: 85: void setServoPosition1(unsigned int dutyCycle);move.c: 86: {;move.c: 87:   
      +                            CCPR1L = dutyCycle >> 2;
  1036   000926  C001  F003         	movff	setServoPosition1@dutyCycle,??_setServoPosition1
  1037   00092A  C002  F004         	movff	setServoPosition1@dutyCycle+1,??_setServoPosition1+1
  1038   00092E  90D8               	bcf	status,0,c
  1039   000930  3204               	rrcf	(??_setServoPosition1+1)^0,f,c
  1040   000932  3203               	rrcf	??_setServoPosition1^0,f,c
  1041   000934  90D8               	bcf	status,0,c
  1042   000936  3204               	rrcf	(??_setServoPosition1+1)^0,f,c
  1043   000938  3203               	rrcf	??_setServoPosition1^0,f,c
  1044   00093A  5003               	movf	??_setServoPosition1^0,w,c
  1045   00093C  6EBE               	movwf	190,c	;volatile
  1046                           
  1047                           ;move.c: 88:     CCP1CONbits.DC1B = dutyCycle & 0x03;
  1048   00093E  C001  F003         	movff	setServoPosition1@dutyCycle,??_setServoPosition1
  1049   000942  0E03               	movlw	3
  1050   000944  1603               	andwf	??_setServoPosition1^0,f,c
  1051   000946  3A03               	swapf	??_setServoPosition1^0,f,c
  1052   000948  50BD               	movf	189,w,c	;volatile
  1053   00094A  1803               	xorwf	??_setServoPosition1^0,w,c
  1054   00094C  0BCF               	andlw	-49
  1055   00094E  1803               	xorwf	??_setServoPosition1^0,w,c
  1056   000950  6EBD               	movwf	189,c	;volatile
  1057   000952  0012               	return		;funcret
  1058   000954                     __end_of_setServoPosition1:
  1059                           	callstack 0
  1060                           
  1061                           	psect	smallconst
  1062   000600                     __psmallconst:
  1063                           	callstack 0
  1064   000600  00                 	db	0
  1065   000601  00                 	db	0	; dummy byte at the end
  1066   000000                     __activetblptr  equ	0
  1067                           
  1068                           	psect	rparam
  1069   000001                     ___rparam_used  equ	1
  1070   000000                     ___param_bank   equ	0
  1071   000000                     __Lparam        equ	__Lrparam
  1072   000000                     __Hparam        equ	__Hrparam
  1073                           
  1074                           	psect	temp
  1075   000013                     btemp:
  1076                           	callstack 0
  1077   000013                     	ds	1
  1078   000013                     int$flags       set	btemp
  1079   000014                     wtemp8          set	btemp+1
  1080   000014                     ttemp5          set	btemp+1
  1081   000017                     ttemp6          set	btemp+4
  1082   00001B                     ttemp7          set	btemp+8
  1083                           
  1084                           	psect	idloc
  1085                           
  1086                           ;Config register IDLOC0 @ 0x200000
  1087                           ;	unspecified, using default values
  1088   200000                     	org	2097152
  1089   200000  FF                 	db	255
  1090                           
  1091                           ;Config register IDLOC1 @ 0x200001
  1092                           ;	unspecified, using default values
  1093   200001                     	org	2097153
  1094   200001  FF                 	db	255
  1095                           
  1096                           ;Config register IDLOC2 @ 0x200002
  1097                           ;	unspecified, using default values
  1098   200002                     	org	2097154
  1099   200002  FF                 	db	255
  1100                           
  1101                           ;Config register IDLOC3 @ 0x200003
  1102                           ;	unspecified, using default values
  1103   200003                     	org	2097155
  1104   200003  FF                 	db	255
  1105                           
  1106                           ;Config register IDLOC4 @ 0x200004
  1107                           ;	unspecified, using default values
  1108   200004                     	org	2097156
  1109   200004  FF                 	db	255
  1110                           
  1111                           ;Config register IDLOC5 @ 0x200005
  1112                           ;	unspecified, using default values
  1113   200005                     	org	2097157
  1114   200005  FF                 	db	255
  1115                           
  1116                           ;Config register IDLOC6 @ 0x200006
  1117                           ;	unspecified, using default values
  1118   200006                     	org	2097158
  1119   200006  FF                 	db	255
  1120                           
  1121                           ;Config register IDLOC7 @ 0x200007
  1122                           ;	unspecified, using default values
  1123   200007                     	org	2097159
  1124   200007  FF                 	db	255
  1125                           
  1126                           	psect	config
  1127                           
  1128                           ; Padding undefined space
  1129   300000                     	org	3145728
  1130   300000  FF                 	db	255
  1131                           
  1132                           ;Config register CONFIG1H @ 0x300001
  1133                           ;	Oscillator Selection bits
  1134                           ;	OSC = INTIO67, Internal oscillator block, port function on RA6 and RA7
  1135                           ;	Fail-Safe Clock Monitor Enable bit
  1136                           ;	FCMEN = 0x0, unprogrammed default
  1137                           ;	Internal/External Oscillator Switchover bit
  1138                           ;	IESO = 0x0, unprogrammed default
  1139   300001                     	org	3145729
  1140   300001  08                 	db	8
  1141                           
  1142                           ;Config register CONFIG2L @ 0x300002
  1143                           ;	Power-up Timer Enable bit
  1144                           ;	PWRT = OFF, PWRT disabled
  1145                           ;	Brown-out Reset Enable bits
  1146                           ;	BOREN = ON, Brown-out Reset enabled and controlled by software (SBOREN is enabled)
  1147                           ;	Brown Out Reset Voltage bits
  1148                           ;	BORV = 0x3, unprogrammed default
  1149   300002                     	org	3145730
  1150   300002  1B                 	db	27
  1151                           
  1152                           ;Config register CONFIG2H @ 0x300003
  1153                           ;	Watchdog Timer Enable bit
  1154                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  1155                           ;	Watchdog Timer Postscale Select bits
  1156                           ;	WDTPS = 0xF, unprogrammed default
  1157   300003                     	org	3145731
  1158   300003  1E                 	db	30
  1159                           
  1160                           ; Padding undefined space
  1161   300004                     	org	3145732
  1162   300004  FF                 	db	255
  1163                           
  1164                           ;Config register CONFIG3H @ 0x300005
  1165                           ;	CCP2 MUX bit
  1166                           ;	CCP2MX = 0x1, unprogrammed default
  1167                           ;	PORTB A/D Enable bit
  1168                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
  1169                           ;	Low-Power Timer1 Oscillator Enable bit
  1170                           ;	LPT1OSC = 0x0, unprogrammed default
  1171                           ;	MCLR Pin Enable bit
  1172                           ;	MCLRE = 0x1, unprogrammed default
  1173   300005                     	org	3145733
  1174   300005  81                 	db	129
  1175                           
  1176                           ;Config register CONFIG4L @ 0x300006
  1177                           ;	Stack Full/Underflow Reset Enable bit
  1178                           ;	STVREN = 0x1, unprogrammed default
  1179                           ;	Single-Supply ICSP Enable bit
  1180                           ;	LVP = OFF, Single-Supply ICSP disabled
  1181                           ;	Extended Instruction Set Enable bit
  1182                           ;	XINST = 0x0, unprogrammed default
  1183                           ;	Background Debugger Enable bit
  1184                           ;	DEBUG = 0x1, unprogrammed default
  1185   300006                     	org	3145734
  1186   300006  81                 	db	129
  1187                           
  1188                           ; Padding undefined space
  1189   300007                     	org	3145735
  1190   300007  FF                 	db	255
  1191                           
  1192                           ;Config register CONFIG5L @ 0x300008
  1193                           ;	unspecified, using default values
  1194                           ;	Code Protection bit
  1195                           ;	CP0 = 0x1, unprogrammed default
  1196                           ;	Code Protection bit
  1197                           ;	CP1 = 0x1, unprogrammed default
  1198                           ;	Code Protection bit
  1199                           ;	CP2 = 0x1, unprogrammed default
  1200                           ;	Code Protection bit
  1201                           ;	CP3 = 0x1, unprogrammed default
  1202   300008                     	org	3145736
  1203   300008  0F                 	db	15
  1204                           
  1205                           ;Config register CONFIG5H @ 0x300009
  1206                           ;	Boot Block Code Protection bit
  1207                           ;	CPB = 0x1, unprogrammed default
  1208                           ;	Data EEPROM Code Protection bit
  1209                           ;	CPD = OFF, Data EEPROM not code-protected
  1210   300009                     	org	3145737
  1211   300009  C0                 	db	192
  1212                           
  1213                           ;Config register CONFIG6L @ 0x30000A
  1214                           ;	unspecified, using default values
  1215                           ;	Write Protection bit
  1216                           ;	WRT0 = 0x1, unprogrammed default
  1217                           ;	Write Protection bit
  1218                           ;	WRT1 = 0x1, unprogrammed default
  1219                           ;	Write Protection bit
  1220                           ;	WRT2 = 0x1, unprogrammed default
  1221                           ;	Write Protection bit
  1222                           ;	WRT3 = 0x1, unprogrammed default
  1223   30000A                     	org	3145738
  1224   30000A  0F                 	db	15
  1225                           
  1226                           ;Config register CONFIG6H @ 0x30000B
  1227                           ;	unspecified, using default values
  1228                           ;	Configuration Register Write Protection bit
  1229                           ;	WRTC = 0x1, unprogrammed default
  1230                           ;	Boot Block Write Protection bit
  1231                           ;	WRTB = 0x1, unprogrammed default
  1232                           ;	Data EEPROM Write Protection bit
  1233                           ;	WRTD = 0x1, unprogrammed default
  1234   30000B                     	org	3145739
  1235   30000B  E0                 	db	224
  1236                           
  1237                           ;Config register CONFIG7L @ 0x30000C
  1238                           ;	unspecified, using default values
  1239                           ;	Table Read Protection bit
  1240                           ;	EBTR0 = 0x1, unprogrammed default
  1241                           ;	Table Read Protection bit
  1242                           ;	EBTR1 = 0x1, unprogrammed default
  1243                           ;	Table Read Protection bit
  1244                           ;	EBTR2 = 0x1, unprogrammed default
  1245                           ;	Table Read Protection bit
  1246                           ;	EBTR3 = 0x1, unprogrammed default
  1247   30000C                     	org	3145740
  1248   30000C  0F                 	db	15
  1249                           
  1250                           ;Config register CONFIG7H @ 0x30000D
  1251                           ;	unspecified, using default values
  1252                           ;	Boot Block Table Read Protection bit
  1253                           ;	EBTRB = 0x1, unprogrammed default
  1254   30000D                     	org	3145741
  1255   30000D  40                 	db	64
  1256                           tosu	equ	0xFFF
  1257                           tosh	equ	0xFFE
  1258                           tosl	equ	0xFFD
  1259                           stkptr	equ	0xFFC
  1260                           pclatu	equ	0xFFB
  1261                           pclath	equ	0xFFA
  1262                           pcl	equ	0xFF9
  1263                           tblptru	equ	0xFF8
  1264                           tblptrh	equ	0xFF7
  1265                           tblptrl	equ	0xFF6
  1266                           tablat	equ	0xFF5
  1267                           prodh	equ	0xFF4
  1268                           prodl	equ	0xFF3
  1269                           indf0	equ	0xFEF
  1270                           postinc0	equ	0xFEE
  1271                           postdec0	equ	0xFED
  1272                           preinc0	equ	0xFEC
  1273                           plusw0	equ	0xFEB
  1274                           fsr0h	equ	0xFEA
  1275                           fsr0l	equ	0xFE9
  1276                           wreg	equ	0xFE8
  1277                           indf1	equ	0xFE7
  1278                           postinc1	equ	0xFE6
  1279                           postdec1	equ	0xFE5
  1280                           preinc1	equ	0xFE4
  1281                           plusw1	equ	0xFE3
  1282                           fsr1h	equ	0xFE2
  1283                           fsr1l	equ	0xFE1
  1284                           bsr	equ	0xFE0
  1285                           indf2	equ	0xFDF
  1286                           postinc2	equ	0xFDE
  1287                           postdec2	equ	0xFDD
  1288                           preinc2	equ	0xFDC
  1289                           plusw2	equ	0xFDB
  1290                           fsr2h	equ	0xFDA
  1291                           fsr2l	equ	0xFD9
  1292                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         6
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     12      18
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           244      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR in COMRAM

    _ISR->_setServoPosition1
    _ISR->_setServoPosition2

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 0
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (1) _ISR                                                  8     8      0     235
                                              4 COMRAM     8     8      0
                  _setServoPosition1
                  _setServoPosition2
 ---------------------------------------------------------------------------------
 (2) _setServoPosition2                                    4     2      2      49
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _setServoPosition1                                    4     2      2      49
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)

 _ISR (ROOT)
   _setServoPosition1
   _setServoPosition2

Address spaces:
Name               Size   Autos  Total    Usage
BIGRAM            1523      0       0      0.0%
BITBANK4           256      0       0      0.0%
BANK4              256      0       0      0.0%
BITBANK3           256      0       0      0.0%
BANK3              256      0       0      0.0%
BITBANK2           256      0       0      0.0%
BANK2              256      0       0      0.0%
BITBANK1           256      0       0      0.0%
BANK1              256      0       0      0.0%
BITBANK5           244      0       0      0.0%
BANK5              244      0       0      0.0%
BITBANK0           128      0       0      0.0%
BANK0              128      0       0      0.0%
BITCOMRAM          126      0       0      0.0%
COMRAM             126     12      18     14.3%
BITBIGSFR_1lh       30      0       0      0.0%
BITBIGSFR_1h        22      0       0      0.0%
BITBIGSFRll         11      0       0      0.0%
BITBIGSFR_5h        10      0       0      0.0%
BITBIGSFRlh          8      0       0      0.0%
BITBIGSFRh           7      0       0      0.0%
BITBIGSFR_2          6      0       0      0.0%
BITBIGSFR_4          3      0       0      0.0%
BITBIGSFR_3          3      0       0      0.0%
BITBIGSFR_5l         2      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0      18      0.0%


Microchip Technology PIC18 Macro Assembler V2.50 build 20240725155939 
Symbol Table                                                                                   Tue Jan 14 16:39:53 2025

                         _i 0011                           _x 000F                           _y 000D  
                        u10 08EE                          u11 08EA                         l801 08A2  
                       l811 08CC                         l803 08C4                         l821 08D6  
                       l813 08CE                         l805 08C6                         l831 08E0  
                       l823 08D8                         l815 08D0                         l807 08C8  
                       l833 08EE                         l825 08DA                         l817 08D2  
                       l809 08CA                         l827 08DC                         l819 08D4  
                       l829 08DE                         l781 0872                         l773 0864  
                       l791 0888                         l783 0874                         l775 086C  
                       l793 088A                         l785 0876                         l777 086E  
                       l795 089C                         l787 0878                         l779 0870  
                       l797 089E                         l789 087A                         l799 08A0  
                       _PR2 0FCB                         _ISR 0008                         wreg 0FE8  
                      ?_ISR 0001                        ISR@i 0007                        _LATC 0F8B  
                      _LATD 0F8C                        i2l60 0952                        i2l63 0924  
                      i2l74 06F0                        i2l93 0860                        _main 0864  
                      btemp 0013                        start 000E                ___param_bank 0000  
                     ??_ISR 0005                       ?_main 0001                       _T2CON 0FCA  
                     i2l931 0612                       i2l925 0926                       i2l941 0652  
                     i2l933 0614                       i2l927 08F8                       i2l951 0694  
                     i2l943 0656                       i2l935 062C                       i2l961 06DE  
                     i2l953 06A0                       i2l945 0674                       i2l937 0638  
                     i2l929 0604                       i2l971 0716                       i2l963 06E6  
                     i2l955 06B0                       i2l947 0680                       i2l939 0644  
                     i2l981 0766                       i2l973 0728                       i2l965 06EA  
                     i2l957 06B4                       i2l949 0688                       i2l991 07AE  
                     i2l983 076E                       i2l975 0730                       i2l967 06FE  
                     i2l959 06D2                       i2l985 078A                       i2l993 07BA  
                     i2l977 074C                       i2l969 0710                       i2l987 0796  
                     i2l979 0758                       i2l995 07C6                       i2l997 07CE  
                     i2l989 07A4                       i2l999 07EA                       ttemp5 0014  
                     ttemp6 0017                       ttemp7 001B                       status 0FD8  
                     wtemp8 0014             __initialization 0954                __end_of_main 08F8  
                    ??_main 000D               __activetblptr 0000                      _ADRESH 0FC4  
                    _ADRESL 0FC3                      _CCPR1L 0FBE                      _CCPR2L 0FBB  
                    i2l1001 07F6                      i2l1011 0844                      i2l1003 0804  
                    i2l1013 084E                      i2l1005 080C                      i2l1007 0828  
                    i2l1015 085A                      i2l1009 0834                      i2l1017 085E  
                    isa$std 0001                __mediumconst 0000           _setServoPosition1 0926  
         _setServoPosition2 08F8          ?_setServoPosition1 0001          ?_setServoPosition2 0001  
                __accesstop 0080     __end_of__initialization 0960               ___rparam_used 0001  
       ??_setServoPosition1 0003         ??_setServoPosition2 0003              __pcstackCOMRAM 0001  
setServoPosition1@dutyCycle 0001   __end_of_setServoPosition1 0954   __end_of_setServoPosition2 0926  
setServoPosition2@dutyCycle 0001                     i2u11_40 0612                     i2u11_41 060E  
                   i2u12_40 0674                     i2u12_41 0670                     i2u20_47 061E  
                   i2u13_40 06D2                     i2u13_41 06CE                     i2u21_47 064A  
                   i2u14_40 06FE                     i2u14_41 06FA                     i2u22_47 06A6  
                   i2u15_40 0728                     i2u15_41 0724                     i2u23_47 0712  
                   i2u16_40 074C                     i2u16_41 0748                     i2u24_47 075E  
                   i2u17_40 078A                     i2u17_41 0786                     i2u25_47 079C  
                   i2u18_40 07EA                     i2u18_41 07E6                     i2u26_47 07FC  
                   i2u19_40 0828                     i2u19_41 0824                     i2u27_47 083A  
                   __Hparam 0000                     __Lparam 0000                __psmallconst 0600  
                   __pcinit 0954                     __ramtop 0600                     __ptext0 0864  
                   __ptext2 08F8                     __ptext3 0926                   _T2CONbits 0FCA  
            __pintcode_body 0602        end_of_initialization 0960                     int_func 0602  
                 _TRISAbits 0F92                   _TRISBbits 0F93                   _TRISCbits 0F94  
                 _TRISDbits 0F95                 _CCP1CONbits 0FBD                 _CCP2CONbits 0FBA  
       start_initialization 0954                 __end_of_ISR 0864                 __pbssCOMRAM 000D  
                  ISR@i_778 0009                    ISR@value 000B                   __pintcode 0008  
               __smallconst 0600                    _PIE1bits 0F9D                    _PIR1bits 0F9E  
                  _RCONbits 0FD0                  _ADCON0bits 0FC2                  _ADCON1bits 0FC1  
                _ADCON2bits 0FC0                    __Hrparam 0000                    __Lrparam 0000  
                  isa$xinst 0000                    int$flags 0013                  _INTCONbits 0FF2  
                  intlevel2 0000                  _OSCCONbits 0FD3  
