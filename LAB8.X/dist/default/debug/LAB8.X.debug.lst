

Microchip MPLAB XC8 Assembler V2.50 build 20240725155939 
                                                                                               Sun Jan 12 17:53:47 2025

Microchip MPLAB XC8 C Compiler v2.50 (Free license) build 20240725155939 Og1 
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	cinit,global,reloc=2,class=CODE,space=0,delta=1
     6                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,space=0,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,space=0,delta=1
    10                           	psect	intcode,global,reloc=2,class=CODE,space=0,delta=1
    11                           	psect	intcode_body,global,reloc=2,class=CODE,space=0,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,space=0,delta=1
    13                           	psect	smallconst,global,reloc=2,class=SMALLCONST,space=0,delta=1,noexec
    14                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    15                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    16                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1,lowdata
    17                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    18                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    19   000000                     
    20                           ; Generated 25/07/2024 GMT
    21                           ; 
    22                           ; Copyright Â© 2024, Microchip Technology Inc. and its subsidiaries ("Microchip")
    23                           ; All rights reserved.
    24                           ; 
    25                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    26                           ; 
    27                           ; Redistribution and use in source and binary forms, with or without modification, are
    28                           ; permitted provided that the following conditions are met:
    29                           ; 
    30                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    31                           ;        conditions and the following disclaimer.
    32                           ; 
    33                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    34                           ;        of conditions and the following disclaimer in the documentation and/or other
    35                           ;        materials provided with the distribution. Publication is not required when
    36                           ;        this file is used in an embedded application.
    37                           ; 
    38                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    39                           ;        software without specific prior written permission.
    40                           ; 
    41                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    42                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    43                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    44                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    45                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    46                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    47                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    48                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    49                           ; 
    50                           ; 
    51                           ; Code-generator required, PIC18F4520 Definitions
    52                           ; 
    53                           ; SFR Addresses
    54   000FE0                     bsr             equ	4064
    55   000FE9                     fsr0            equ	4073
    56   000FEA                     fsr0h           equ	4074
    57   000FE9                     fsr0l           equ	4073
    58   000FE1                     fsr1            equ	4065
    59   000FE2                     fsr1h           equ	4066
    60   000FE1                     fsr1l           equ	4065
    61   000FD9                     fsr2            equ	4057
    62   000FDA                     fsr2h           equ	4058
    63   000FD9                     fsr2l           equ	4057
    64   000FEF                     indf0           equ	4079
    65   000FE7                     indf1           equ	4071
    66   000FDF                     indf2           equ	4063
    67   000FF2                     intcon          equ	4082
    68   000000                     nvmcon          equ	0
    69   000FF9                     pcl             equ	4089
    70   000FFA                     pclath          equ	4090
    71   000FFB                     pclatu          equ	4091
    72   000FEB                     plusw0          equ	4075
    73   000FE3                     plusw1          equ	4067
    74   000FDB                     plusw2          equ	4059
    75   000FED                     postdec0        equ	4077
    76   000FE5                     postdec1        equ	4069
    77   000FDD                     postdec2        equ	4061
    78   000FEE                     postinc0        equ	4078
    79   000FE6                     postinc1        equ	4070
    80   000FDE                     postinc2        equ	4062
    81   000FEC                     preinc0         equ	4076
    82   000FE4                     preinc1         equ	4068
    83   000FDC                     preinc2         equ	4060
    84   000FF3                     prod            equ	4083
    85   000FF4                     prodh           equ	4084
    86   000FF3                     prodl           equ	4083
    87   000FD8                     status          equ	4056
    88   000FF5                     tablat          equ	4085
    89   000FF6                     tblptr          equ	4086
    90   000FF7                     tblptrh         equ	4087
    91   000FF6                     tblptrl         equ	4086
    92   000FF8                     tblptru         equ	4088
    93   000FFD                     tosl            equ	4093
    94   000FE8                     wreg            equ	4072
    95   000F80                     PORTA           equ	3968	;# 
    96   000F81                     PORTB           equ	3969	;# 
    97   000F82                     PORTC           equ	3970	;# 
    98   000F83                     PORTD           equ	3971	;# 
    99   000F84                     PORTE           equ	3972	;# 
   100   000F89                     LATA            equ	3977	;# 
   101   000F8A                     LATB            equ	3978	;# 
   102   000F8B                     LATC            equ	3979	;# 
   103   000F8C                     LATD            equ	3980	;# 
   104   000F8D                     LATE            equ	3981	;# 
   105   000F92                     TRISA           equ	3986	;# 
   106   000F92                     DDRA            equ	3986	;# 
   107   000F93                     TRISB           equ	3987	;# 
   108   000F93                     DDRB            equ	3987	;# 
   109   000F94                     TRISC           equ	3988	;# 
   110   000F94                     DDRC            equ	3988	;# 
   111   000F95                     TRISD           equ	3989	;# 
   112   000F95                     DDRD            equ	3989	;# 
   113   000F96                     TRISE           equ	3990	;# 
   114   000F96                     DDRE            equ	3990	;# 
   115   000F9B                     OSCTUNE         equ	3995	;# 
   116   000F9D                     PIE1            equ	3997	;# 
   117   000F9E                     PIR1            equ	3998	;# 
   118   000F9F                     IPR1            equ	3999	;# 
   119   000FA0                     PIE2            equ	4000	;# 
   120   000FA1                     PIR2            equ	4001	;# 
   121   000FA2                     IPR2            equ	4002	;# 
   122   000FA6                     EECON1          equ	4006	;# 
   123   000FA7                     EECON2          equ	4007	;# 
   124   000FA8                     EEDATA          equ	4008	;# 
   125   000FA9                     EEADR           equ	4009	;# 
   126   000FAB                     RCSTA           equ	4011	;# 
   127   000FAB                     RCSTA1          equ	4011	;# 
   128   000FAC                     TXSTA           equ	4012	;# 
   129   000FAC                     TXSTA1          equ	4012	;# 
   130   000FAD                     TXREG           equ	4013	;# 
   131   000FAD                     TXREG1          equ	4013	;# 
   132   000FAE                     RCREG           equ	4014	;# 
   133   000FAE                     RCREG1          equ	4014	;# 
   134   000FAF                     SPBRG           equ	4015	;# 
   135   000FAF                     SPBRG1          equ	4015	;# 
   136   000FB0                     SPBRGH          equ	4016	;# 
   137   000FB1                     T3CON           equ	4017	;# 
   138   000FB2                     TMR3            equ	4018	;# 
   139   000FB2                     TMR3L           equ	4018	;# 
   140   000FB3                     TMR3H           equ	4019	;# 
   141   000FB4                     CMCON           equ	4020	;# 
   142   000FB5                     CVRCON          equ	4021	;# 
   143   000FB6                     ECCP1AS         equ	4022	;# 
   144   000FB6                     ECCPAS          equ	4022	;# 
   145   000FB7                     PWM1CON         equ	4023	;# 
   146   000FB7                     ECCP1DEL        equ	4023	;# 
   147   000FB8                     BAUDCON         equ	4024	;# 
   148   000FB8                     BAUDCTL         equ	4024	;# 
   149   000FBA                     CCP2CON         equ	4026	;# 
   150   000FBB                     CCPR2           equ	4027	;# 
   151   000FBB                     CCPR2L          equ	4027	;# 
   152   000FBC                     CCPR2H          equ	4028	;# 
   153   000FBD                     CCP1CON         equ	4029	;# 
   154   000FBE                     CCPR1           equ	4030	;# 
   155   000FBE                     CCPR1L          equ	4030	;# 
   156   000FBF                     CCPR1H          equ	4031	;# 
   157   000FC0                     ADCON2          equ	4032	;# 
   158   000FC1                     ADCON1          equ	4033	;# 
   159   000FC2                     ADCON0          equ	4034	;# 
   160   000FC3                     ADRES           equ	4035	;# 
   161   000FC3                     ADRESL          equ	4035	;# 
   162   000FC4                     ADRESH          equ	4036	;# 
   163   000FC5                     SSPCON2         equ	4037	;# 
   164   000FC6                     SSPCON1         equ	4038	;# 
   165   000FC7                     SSPSTAT         equ	4039	;# 
   166   000FC8                     SSPADD          equ	4040	;# 
   167   000FC9                     SSPBUF          equ	4041	;# 
   168   000FCA                     T2CON           equ	4042	;# 
   169   000FCB                     PR2             equ	4043	;# 
   170   000FCB                     MEMCON          equ	4043	;# 
   171   000FCC                     TMR2            equ	4044	;# 
   172   000FCD                     T1CON           equ	4045	;# 
   173   000FCE                     TMR1            equ	4046	;# 
   174   000FCE                     TMR1L           equ	4046	;# 
   175   000FCF                     TMR1H           equ	4047	;# 
   176   000FD0                     RCON            equ	4048	;# 
   177   000FD1                     WDTCON          equ	4049	;# 
   178   000FD2                     HLVDCON         equ	4050	;# 
   179   000FD2                     LVDCON          equ	4050	;# 
   180   000FD3                     OSCCON          equ	4051	;# 
   181   000FD5                     T0CON           equ	4053	;# 
   182   000FD6                     TMR0            equ	4054	;# 
   183   000FD6                     TMR0L           equ	4054	;# 
   184   000FD7                     TMR0H           equ	4055	;# 
   185   000FD8                     STATUS          equ	4056	;# 
   186   000FD9                     FSR2            equ	4057	;# 
   187   000FD9                     FSR2L           equ	4057	;# 
   188   000FDA                     FSR2H           equ	4058	;# 
   189   000FDB                     PLUSW2          equ	4059	;# 
   190   000FDC                     PREINC2         equ	4060	;# 
   191   000FDD                     POSTDEC2        equ	4061	;# 
   192   000FDE                     POSTINC2        equ	4062	;# 
   193   000FDF                     INDF2           equ	4063	;# 
   194   000FE0                     BSR             equ	4064	;# 
   195   000FE1                     FSR1            equ	4065	;# 
   196   000FE1                     FSR1L           equ	4065	;# 
   197   000FE2                     FSR1H           equ	4066	;# 
   198   000FE3                     PLUSW1          equ	4067	;# 
   199   000FE4                     PREINC1         equ	4068	;# 
   200   000FE5                     POSTDEC1        equ	4069	;# 
   201   000FE6                     POSTINC1        equ	4070	;# 
   202   000FE7                     INDF1           equ	4071	;# 
   203   000FE8                     WREG            equ	4072	;# 
   204   000FE9                     FSR0            equ	4073	;# 
   205   000FE9                     FSR0L           equ	4073	;# 
   206   000FEA                     FSR0H           equ	4074	;# 
   207   000FEB                     PLUSW0          equ	4075	;# 
   208   000FEC                     PREINC0         equ	4076	;# 
   209   000FED                     POSTDEC0        equ	4077	;# 
   210   000FEE                     POSTINC0        equ	4078	;# 
   211   000FEF                     INDF0           equ	4079	;# 
   212   000FF0                     INTCON3         equ	4080	;# 
   213   000FF1                     INTCON2         equ	4081	;# 
   214   000FF2                     INTCON          equ	4082	;# 
   215   000FF3                     PROD            equ	4083	;# 
   216   000FF3                     PRODL           equ	4083	;# 
   217   000FF4                     PRODH           equ	4084	;# 
   218   000FF5                     TABLAT          equ	4085	;# 
   219   000FF6                     TBLPTR          equ	4086	;# 
   220   000FF6                     TBLPTRL         equ	4086	;# 
   221   000FF7                     TBLPTRH         equ	4087	;# 
   222   000FF8                     TBLPTRU         equ	4088	;# 
   223   000FF9                     PCLAT           equ	4089	;# 
   224   000FF9                     PC              equ	4089	;# 
   225   000FF9                     PCL             equ	4089	;# 
   226   000FFA                     PCLATH          equ	4090	;# 
   227   000FFB                     PCLATU          equ	4091	;# 
   228   000FFC                     STKPTR          equ	4092	;# 
   229   000FFD                     TOS             equ	4093	;# 
   230   000FFD                     TOSL            equ	4093	;# 
   231   000FFE                     TOSH            equ	4094	;# 
   232   000FFF                     TOSU            equ	4095	;# 
   233   000F8B                     _LATC           set	3979
   234   000F94                     _TRISCbits      set	3988
   235   000F93                     _TRISBbits      set	3987
   236   000FBE                     _CCPR1L         set	4030
   237   000FCB                     _PR2            set	4043
   238   000FCA                     _T2CON          set	4042
   239   000FBD                     _CCP1CONbits    set	4029
   240   000FD3                     _OSCCONbits     set	4051
   241   000FCA                     _T2CONbits      set	4042
   242   000FF2                     _INTCONbits     set	4082
   243                           
   244                           ; #config settings
   245                           
   246                           	psect	cinit
   247   00070E                     __pcinit:
   248                           	callstack 0
   249   00070E                     start_initialization:
   250                           	callstack 0
   251   00070E                     __initialization:
   252                           	callstack 0
   253                           
   254                           ; Clear objects allocated to COMRAM (1 bytes)
   255   00070E  6A0B               	clrf	__pbssCOMRAM& (0+255),c
   256   000710                     end_of_initialization:
   257                           	callstack 0
   258   000710                     __end_of__initialization:
   259                           	callstack 0
   260   000710  900C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   261   000712  920C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   262   000714  0100               	movlb	0
   263   000716  EF36  F003         	goto	_main	;jump to C main() function
   264                           
   265                           	psect	bssCOMRAM
   266   00000B                     __pbssCOMRAM:
   267                           	callstack 0
   268   00000B                     _currentPosition:
   269                           	callstack 0
   270   00000B                     	ds	1
   271                           
   272                           	psect	cstackCOMRAM
   273   000001                     __pcstackCOMRAM:
   274                           	callstack 0
   275   000001                     i2setServoPosition@dutyCycle:
   276                           	callstack 0
   277                           
   278                           ; 2 bytes @ 0x0
   279   000001                     	ds	2
   280   000003                     ??i2_setServoPosition:
   281                           
   282                           ; 1 bytes @ 0x2
   283   000003                     	ds	2
   284   000005                     ISR@x:
   285                           	callstack 0
   286   000005                     
   287                           ; 1 bytes @ 0x4
   288   000005                     	ds	2
   289   000007                     setServoPosition@dutyCycle:
   290                           	callstack 0
   291                           
   292                           ; 2 bytes @ 0x6
   293   000007                     	ds	2
   294   000009                     ??_setServoPosition:
   295                           
   296                           ; 1 bytes @ 0x8
   297   000009                     	ds	2
   298   00000B                     
   299                           ; 1 bytes @ 0xA
   300 ;;
   301 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   302 ;;
   303 ;; *************** function _main *****************
   304 ;; Defined at:
   305 ;;		line 19 in file "advamce.c"
   306 ;; Parameters:    Size  Location     Type
   307 ;;		None
   308 ;; Auto vars:     Size  Location     Type
   309 ;;		None
   310 ;; Return value:  Size  Location     Type
   311 ;;                  1    wreg      void 
   312 ;; Registers used:
   313 ;;		wreg, status,2, status,0, cstack
   314 ;; Tracked objects:
   315 ;;		On entry : 0/0
   316 ;;		On exit  : 0/0
   317 ;;		Unchanged: 0/0
   318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   319 ;;      Params:         0       0       0       0       0       0       0
   320 ;;      Locals:         0       0       0       0       0       0       0
   321 ;;      Temps:          0       0       0       0       0       0       0
   322 ;;      Totals:         0       0       0       0       0       0       0
   323 ;;Total ram usage:        0 bytes
   324 ;; Hardware stack levels required when called: 3
   325 ;; This function calls:
   326 ;;		_setServoPosition
   327 ;; This function is called by:
   328 ;;		Startup code after reset
   329 ;; This function uses a non-reentrant model
   330 ;;
   331                           
   332                           	psect	text0
   333   00066C                     __ptext0:
   334                           	callstack 0
   335   00066C                     _main:
   336                           	callstack 28
   337   00066C                     
   338                           ;advamce.c: 22:     INTCONbits.GIE = 1;
   339   00066C  8093               	bsf	147,0,c	;volatile
   340                           
   341                           ;advamce.c: 23:     INTCONbits.PEIE = 1;
   342   00066E  9494               	bcf	148,2,c	;volatile
   343                           
   344                           ;advamce.c: 24:     INTCONbits.INT0IE = 1;
   345   000670  6A8B               	clrf	139,c	;volatile
   346                           
   347                           ;advamce.c: 26: 
   348   000672  84CA               	bsf	202,2,c	;volatile
   349   000674                     
   350                           ;advamce.c: 27: 
   351   000674  50CA               	movf	202,w,c	;volatile
   352   000676  0BFC               	andlw	-4
   353   000678  0901               	iorlw	1
   354   00067A  6ECA               	movwf	202,c	;volatile
   355                           
   356                           ;advamce.c: 28:     setServoPosition(16);
   357   00067C  50D3               	movf	211,w,c	;volatile
   358   00067E  0B8F               	andlw	-113
   359   000680  0910               	iorlw	16
   360   000682  6ED3               	movwf	211,c	;volatile
   361                           
   362                           ;advamce.c: 29: 
   363   000684  50BD               	movf	189,w,c	;volatile
   364   000686  0BF0               	andlw	-16
   365   000688  090C               	iorlw	12
   366   00068A  6EBD               	movwf	189,c	;volatile
   367                           
   368                           ;advamce.c: 30:     while (1){}
   369   00068C  0E05               	movlw	5
   370   00068E  6ECA               	movwf	202,c	;volatile
   371                           
   372                           ;advamce.c: 31: }
   373   000690  0E9B               	movlw	155
   374   000692  6ECB               	movwf	203,c	;volatile
   375   000694                     
   376                           ;advamce.c: 32: 
   377   000694  6ABE               	clrf	190,c	;volatile
   378   000696                     
   379                           ;advamce.c: 35: {
   380   000696  8EF2               	bsf	242,7,c	;volatile
   381   000698                     
   382                           ;advamce.c: 36:     CCPR1L = dutyCycle >> 2;
   383   000698  8CF2               	bsf	242,6,c	;volatile
   384   00069A                     
   385                           ;advamce.c: 37:     CCP1CONbits.DC1B = dutyCycle & 0x03;
   386   00069A  88F2               	bsf	242,4,c	;volatile
   387   00069C                     
   388                           ;advamce.c: 38: }
   389   00069C  92F2               	bcf	242,1,c	;volatile
   390   00069E                     
   391                           ;advamce.c: 41: void __attribute__((picinterrupt(("")))) ISR(void)
   392   00069E  0E00               	movlw	0
   393   0006A0  6E08               	movwf	(setServoPosition@dutyCycle+1)^0,c
   394   0006A2  0E10               	movlw	16
   395   0006A4  6E07               	movwf	setServoPosition@dutyCycle^0,c
   396   0006A6  EC59  F003         	call	_setServoPosition	;wreg free
   397   0006AA                     l31:
   398   0006AA  EF55  F003         	goto	l31
   399   0006AE  EF07  F000         	goto	start
   400   0006B2                     __end_of_main:
   401                           	callstack 0
   402                           
   403 ;; *************** function _setServoPosition *****************
   404 ;; Defined at:
   405 ;;		line 47 in file "advamce.c"
   406 ;; Parameters:    Size  Location     Type
   407 ;;  dutyCycle       2    6[COMRAM] unsigned int 
   408 ;; Auto vars:     Size  Location     Type
   409 ;;		None
   410 ;; Return value:  Size  Location     Type
   411 ;;                  1    wreg      void 
   412 ;; Registers used:
   413 ;;		wreg, status,2, status,0
   414 ;; Tracked objects:
   415 ;;		On entry : 0/0
   416 ;;		On exit  : 0/0
   417 ;;		Unchanged: 0/0
   418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   419 ;;      Params:         2       0       0       0       0       0       0
   420 ;;      Locals:         0       0       0       0       0       0       0
   421 ;;      Temps:          2       0       0       0       0       0       0
   422 ;;      Totals:         4       0       0       0       0       0       0
   423 ;;Total ram usage:        4 bytes
   424 ;; Hardware stack levels used: 1
   425 ;; Hardware stack levels required when called: 2
   426 ;; This function calls:
   427 ;;		Nothing
   428 ;; This function is called by:
   429 ;;		_main
   430 ;; This function uses a non-reentrant model
   431 ;;
   432                           
   433                           	psect	text1
   434   0006B2                     __ptext1:
   435                           	callstack 0
   436   0006B2                     _setServoPosition:
   437                           	callstack 28
   438   0006B2                     
   439                           ;advamce.c: 47:         for (int x = 16; x <= 75; x++);advamce.c: 48:         {;advamce.
      +                          c: 49:             setServoPosition(x);
   440   0006B2  C007  F009         	movff	setServoPosition@dutyCycle,??_setServoPosition
   441   0006B6  C008  F00A         	movff	setServoPosition@dutyCycle+1,??_setServoPosition+1
   442   0006BA  90D8               	bcf	status,0,c
   443   0006BC  320A               	rrcf	(??_setServoPosition+1)^0,f,c
   444   0006BE  3209               	rrcf	??_setServoPosition^0,f,c
   445   0006C0  90D8               	bcf	status,0,c
   446   0006C2  320A               	rrcf	(??_setServoPosition+1)^0,f,c
   447   0006C4  3209               	rrcf	??_setServoPosition^0,f,c
   448   0006C6  5009               	movf	??_setServoPosition^0,w,c
   449   0006C8  6EBE               	movwf	190,c	;volatile
   450                           
   451                           ;advamce.c: 50:             _delay((unsigned long)((30)*(125000/4000.0)));
   452   0006CA  C007  F009         	movff	setServoPosition@dutyCycle,??_setServoPosition
   453   0006CE  0E03               	movlw	3
   454   0006D0  1609               	andwf	??_setServoPosition^0,f,c
   455   0006D2  3A09               	swapf	??_setServoPosition^0,f,c
   456   0006D4  50BD               	movf	189,w,c	;volatile
   457   0006D6  1809               	xorwf	??_setServoPosition^0,w,c
   458   0006D8  0BCF               	andlw	-49
   459   0006DA  1809               	xorwf	??_setServoPosition^0,w,c
   460   0006DC  6EBD               	movwf	189,c	;volatile
   461   0006DE  0012               	return		;funcret
   462   0006E0                     __end_of_setServoPosition:
   463                           	callstack 0
   464                           
   465 ;; *************** function _ISR *****************
   466 ;; Defined at:
   467 ;;		line 54 in file "advamce.c"
   468 ;; Parameters:    Size  Location     Type
   469 ;;		None
   470 ;; Auto vars:     Size  Location     Type
   471 ;;  x               2    4[COMRAM] int 
   472 ;; Return value:  Size  Location     Type
   473 ;;                  1    wreg      void 
   474 ;; Registers used:
   475 ;;		wreg, status,2, status,0, cstack
   476 ;; Tracked objects:
   477 ;;		On entry : 0/0
   478 ;;		On exit  : 0/0
   479 ;;		Unchanged: 0/0
   480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   481 ;;      Params:         0       0       0       0       0       0       0
   482 ;;      Locals:         2       0       0       0       0       0       0
   483 ;;      Temps:          0       0       0       0       0       0       0
   484 ;;      Totals:         2       0       0       0       0       0       0
   485 ;;Total ram usage:        2 bytes
   486 ;; Hardware stack levels used: 1
   487 ;; Hardware stack levels required when called: 1
   488 ;; This function calls:
   489 ;;		i2_setServoPosition
   490 ;; This function is called by:
   491 ;;		Interrupt level 2
   492 ;; This function uses a non-reentrant model
   493 ;;
   494                           
   495                           	psect	intcode
   496   000008                     __pintcode:
   497                           	callstack 0
   498   000008                     _ISR:
   499                           	callstack 28
   500                           
   501                           ;incstack = 0
   502   000008  820C               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
   503   00000A  ED01  F003         	call	int_func,f	;refresh shadow registers
   504                           
   505                           	psect	intcode_body
   506   000602                     __pintcode_body:
   507                           	callstack 28
   508   000602                     int_func:
   509                           	callstack 28
   510   000602  0006               	pop		; remove dummy address from shadow register refresh
   511   000604  A2F2               	btfss	242,1,c	;volatile
   512   000606  EF07  F003         	goto	i2u3_41
   513   00060A  EF09  F003         	goto	i2u3_40
   514   00060E                     i2u3_41:
   515   00060E  EF34  F003         	goto	i2l45
   516   000612                     i2u3_40:
   517   000612  0E9C               	movlw	156
   518   000614                     i2u5_47:
   519   000614  D000               	nop2	
   520   000616  2EE8               	decfsz	wreg,f,c
   521   000618  D7FD               	bra	i2u5_47
   522   00061A  0000               	nop	
   523   00061C  0E00               	movlw	0
   524   00061E  6E06               	movwf	(ISR@x+1)^0,c
   525   000620  0E10               	movlw	16
   526   000622  6E05               	movwf	ISR@x^0,c
   527   000624                     i2l793:
   528   000624  C005  F001         	movff	ISR@x,i2setServoPosition@dutyCycle
   529   000628  C006  F002         	movff	ISR@x+1,i2setServoPosition@dutyCycle+1
   530   00062C  EC70  F003         	call	i2_setServoPosition	;wreg free
   531   000630  0EBB               	movlw	187
   532   000632                     i2u6_47:
   533   000632  D000               	nop2	
   534   000634  2EE8               	decfsz	wreg,f,c
   535   000636  D7FD               	bra	i2u6_47
   536   000638  D000               	nop2	
   537   00063A  4A05               	infsnz	ISR@x^0,f,c
   538   00063C  2A06               	incf	(ISR@x+1)^0,f,c
   539   00063E  BE06               	btfsc	(ISR@x+1)^0,7,c
   540   000640  EF2B  F003         	goto	i2u4_41
   541   000644  5006               	movf	(ISR@x+1)^0,w,c
   542   000646  E109               	bnz	i2u4_40
   543   000648  0E4C               	movlw	76
   544   00064A  5C05               	subwf	ISR@x^0,w,c
   545   00064C  A0D8               	btfss	status,0,c
   546   00064E  EF2B  F003         	goto	i2u4_41
   547   000652  EF2D  F003         	goto	i2u4_40
   548   000656                     i2u4_41:
   549   000656  EF12  F003         	goto	i2l793
   550   00065A                     i2u4_40:
   551   00065A  0E00               	movlw	0
   552   00065C  6E02               	movwf	(i2setServoPosition@dutyCycle+1)^0,c
   553   00065E  0E10               	movlw	16
   554   000660  6E01               	movwf	i2setServoPosition@dutyCycle^0,c
   555   000662  EC70  F003         	call	i2_setServoPosition	;wreg free
   556   000666  92F2               	bcf	242,1,c	;volatile
   557   000668                     i2l45:
   558   000668  920C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   559   00066A  0011               	retfie		f
   560   00066C                     __end_of_ISR:
   561                           	callstack 0
   562                           
   563 ;; *************** function i2_setServoPosition *****************
   564 ;; Defined at:
   565 ;;		line 47 in file "advamce.c"
   566 ;; Parameters:    Size  Location     Type
   567 ;;  dutyCycle       2    0[COMRAM] unsigned int 
   568 ;; Auto vars:     Size  Location     Type
   569 ;;		None
   570 ;; Return value:  Size  Location     Type
   571 ;;                  1    wreg      void 
   572 ;; Registers used:
   573 ;;		wreg, status,2, status,0
   574 ;; Tracked objects:
   575 ;;		On entry : 0/0
   576 ;;		On exit  : 0/0
   577 ;;		Unchanged: 0/0
   578 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   579 ;;      Params:         2       0       0       0       0       0       0
   580 ;;      Locals:         0       0       0       0       0       0       0
   581 ;;      Temps:          2       0       0       0       0       0       0
   582 ;;      Totals:         4       0       0       0       0       0       0
   583 ;;Total ram usage:        4 bytes
   584 ;; Hardware stack levels used: 1
   585 ;; This function calls:
   586 ;;		Nothing
   587 ;; This function is called by:
   588 ;;		_ISR
   589 ;; This function uses a non-reentrant model
   590 ;;
   591                           
   592                           	psect	text3
   593   0006E0                     __ptext3:
   594                           	callstack 0
   595   0006E0                     i2_setServoPosition:
   596                           	callstack 28
   597   0006E0                     
   598                           ;advamce.c: 47:         for (int x = 16; x <= 75; x++);advamce.c: 48:         {;advamce.
      +                          c: 49:             setServoPosition(x);
   599   0006E0  C001  F003         	movff	i2setServoPosition@dutyCycle,??i2_setServoPosition
   600   0006E4  C002  F004         	movff	i2setServoPosition@dutyCycle+1,??i2_setServoPosition+1
   601   0006E8  90D8               	bcf	status,0,c
   602   0006EA  3204               	rrcf	(??i2_setServoPosition+1)^0,f,c
   603   0006EC  3203               	rrcf	??i2_setServoPosition^0,f,c
   604   0006EE  90D8               	bcf	status,0,c
   605   0006F0  3204               	rrcf	(??i2_setServoPosition+1)^0,f,c
   606   0006F2  3203               	rrcf	??i2_setServoPosition^0,f,c
   607   0006F4  5003               	movf	??i2_setServoPosition^0,w,c
   608   0006F6  6EBE               	movwf	190,c	;volatile
   609                           
   610                           ;advamce.c: 50:             _delay((unsigned long)((30)*(125000/4000.0)));
   611   0006F8  C001  F003         	movff	i2setServoPosition@dutyCycle,??i2_setServoPosition
   612   0006FC  0E03               	movlw	3
   613   0006FE  1603               	andwf	??i2_setServoPosition^0,f,c
   614   000700  3A03               	swapf	??i2_setServoPosition^0,f,c
   615   000702  50BD               	movf	189,w,c	;volatile
   616   000704  1803               	xorwf	??i2_setServoPosition^0,w,c
   617   000706  0BCF               	andlw	-49
   618   000708  1803               	xorwf	??i2_setServoPosition^0,w,c
   619   00070A  6EBD               	movwf	189,c	;volatile
   620   00070C  0012               	return		;funcret
   621   00070E                     __end_ofi2_setServoPosition:
   622                           	callstack 0
   623                           
   624                           	psect	smallconst
   625   000600                     __psmallconst:
   626                           	callstack 0
   627   000600  00                 	db	0
   628   000601  00                 	db	0	; dummy byte at the end
   629   000000                     __activetblptr  equ	0
   630                           
   631                           	psect	rparam
   632   000001                     ___rparam_used  equ	1
   633   000000                     ___param_bank   equ	0
   634   000000                     __Lparam        equ	__Lrparam
   635   000000                     __Hparam        equ	__Hrparam
   636                           
   637                           	psect	temp
   638   00000C                     btemp:
   639                           	callstack 0
   640   00000C                     	ds	1
   641   00000C                     int$flags       set	btemp
   642   00000D                     wtemp8          set	btemp+1
   643   00000D                     ttemp5          set	btemp+1
   644   000010                     ttemp6          set	btemp+4
   645   000014                     ttemp7          set	btemp+8
   646                           
   647                           	psect	idloc
   648                           
   649                           ;Config register IDLOC0 @ 0x200000
   650                           ;	unspecified, using default values
   651   200000                     	org	2097152
   652   200000  FF                 	db	255
   653                           
   654                           ;Config register IDLOC1 @ 0x200001
   655                           ;	unspecified, using default values
   656   200001                     	org	2097153
   657   200001  FF                 	db	255
   658                           
   659                           ;Config register IDLOC2 @ 0x200002
   660                           ;	unspecified, using default values
   661   200002                     	org	2097154
   662   200002  FF                 	db	255
   663                           
   664                           ;Config register IDLOC3 @ 0x200003
   665                           ;	unspecified, using default values
   666   200003                     	org	2097155
   667   200003  FF                 	db	255
   668                           
   669                           ;Config register IDLOC4 @ 0x200004
   670                           ;	unspecified, using default values
   671   200004                     	org	2097156
   672   200004  FF                 	db	255
   673                           
   674                           ;Config register IDLOC5 @ 0x200005
   675                           ;	unspecified, using default values
   676   200005                     	org	2097157
   677   200005  FF                 	db	255
   678                           
   679                           ;Config register IDLOC6 @ 0x200006
   680                           ;	unspecified, using default values
   681   200006                     	org	2097158
   682   200006  FF                 	db	255
   683                           
   684                           ;Config register IDLOC7 @ 0x200007
   685                           ;	unspecified, using default values
   686   200007                     	org	2097159
   687   200007  FF                 	db	255
   688                           
   689                           	psect	config
   690                           
   691                           ; Padding undefined space
   692   300000                     	org	3145728
   693   300000  FF                 	db	255
   694                           
   695                           ;Config register CONFIG1H @ 0x300001
   696                           ;	Oscillator Selection bits
   697                           ;	OSC = INTIO67, Internal oscillator block, port function on RA6 and RA7
   698                           ;	Fail-Safe Clock Monitor Enable bit
   699                           ;	FCMEN = 0x0, unprogrammed default
   700                           ;	Internal/External Oscillator Switchover bit
   701                           ;	IESO = 0x0, unprogrammed default
   702   300001                     	org	3145729
   703   300001  08                 	db	8
   704                           
   705                           ;Config register CONFIG2L @ 0x300002
   706                           ;	Power-up Timer Enable bit
   707                           ;	PWRT = OFF, PWRT disabled
   708                           ;	Brown-out Reset Enable bits
   709                           ;	BOREN = ON, Brown-out Reset enabled and controlled by software (SBOREN is enabled)
   710                           ;	Brown Out Reset Voltage bits
   711                           ;	BORV = 0x3, unprogrammed default
   712   300002                     	org	3145730
   713   300002  1B                 	db	27
   714                           
   715                           ;Config register CONFIG2H @ 0x300003
   716                           ;	Watchdog Timer Enable bit
   717                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
   718                           ;	Watchdog Timer Postscale Select bits
   719                           ;	WDTPS = 0xF, unprogrammed default
   720   300003                     	org	3145731
   721   300003  1E                 	db	30
   722                           
   723                           ; Padding undefined space
   724   300004                     	org	3145732
   725   300004  FF                 	db	255
   726                           
   727                           ;Config register CONFIG3H @ 0x300005
   728                           ;	CCP2 MUX bit
   729                           ;	CCP2MX = 0x1, unprogrammed default
   730                           ;	PORTB A/D Enable bit
   731                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
   732                           ;	Low-Power Timer1 Oscillator Enable bit
   733                           ;	LPT1OSC = 0x0, unprogrammed default
   734                           ;	MCLR Pin Enable bit
   735                           ;	MCLRE = 0x1, unprogrammed default
   736   300005                     	org	3145733
   737   300005  81                 	db	129
   738                           
   739                           ;Config register CONFIG4L @ 0x300006
   740                           ;	Stack Full/Underflow Reset Enable bit
   741                           ;	STVREN = 0x1, unprogrammed default
   742                           ;	Single-Supply ICSP Enable bit
   743                           ;	LVP = OFF, Single-Supply ICSP disabled
   744                           ;	Extended Instruction Set Enable bit
   745                           ;	XINST = 0x0, unprogrammed default
   746                           ;	Background Debugger Enable bit
   747                           ;	DEBUG = 0x1, unprogrammed default
   748   300006                     	org	3145734
   749   300006  81                 	db	129
   750                           
   751                           ; Padding undefined space
   752   300007                     	org	3145735
   753   300007  FF                 	db	255
   754                           
   755                           ;Config register CONFIG5L @ 0x300008
   756                           ;	unspecified, using default values
   757                           ;	Code Protection bit
   758                           ;	CP0 = 0x1, unprogrammed default
   759                           ;	Code Protection bit
   760                           ;	CP1 = 0x1, unprogrammed default
   761                           ;	Code Protection bit
   762                           ;	CP2 = 0x1, unprogrammed default
   763                           ;	Code Protection bit
   764                           ;	CP3 = 0x1, unprogrammed default
   765   300008                     	org	3145736
   766   300008  0F                 	db	15
   767                           
   768                           ;Config register CONFIG5H @ 0x300009
   769                           ;	Boot Block Code Protection bit
   770                           ;	CPB = 0x1, unprogrammed default
   771                           ;	Data EEPROM Code Protection bit
   772                           ;	CPD = OFF, Data EEPROM not code-protected
   773   300009                     	org	3145737
   774   300009  C0                 	db	192
   775                           
   776                           ;Config register CONFIG6L @ 0x30000A
   777                           ;	unspecified, using default values
   778                           ;	Write Protection bit
   779                           ;	WRT0 = 0x1, unprogrammed default
   780                           ;	Write Protection bit
   781                           ;	WRT1 = 0x1, unprogrammed default
   782                           ;	Write Protection bit
   783                           ;	WRT2 = 0x1, unprogrammed default
   784                           ;	Write Protection bit
   785                           ;	WRT3 = 0x1, unprogrammed default
   786   30000A                     	org	3145738
   787   30000A  0F                 	db	15
   788                           
   789                           ;Config register CONFIG6H @ 0x30000B
   790                           ;	unspecified, using default values
   791                           ;	Configuration Register Write Protection bit
   792                           ;	WRTC = 0x1, unprogrammed default
   793                           ;	Boot Block Write Protection bit
   794                           ;	WRTB = 0x1, unprogrammed default
   795                           ;	Data EEPROM Write Protection bit
   796                           ;	WRTD = 0x1, unprogrammed default
   797   30000B                     	org	3145739
   798   30000B  E0                 	db	224
   799                           
   800                           ;Config register CONFIG7L @ 0x30000C
   801                           ;	unspecified, using default values
   802                           ;	Table Read Protection bit
   803                           ;	EBTR0 = 0x1, unprogrammed default
   804                           ;	Table Read Protection bit
   805                           ;	EBTR1 = 0x1, unprogrammed default
   806                           ;	Table Read Protection bit
   807                           ;	EBTR2 = 0x1, unprogrammed default
   808                           ;	Table Read Protection bit
   809                           ;	EBTR3 = 0x1, unprogrammed default
   810   30000C                     	org	3145740
   811   30000C  0F                 	db	15
   812                           
   813                           ;Config register CONFIG7H @ 0x30000D
   814                           ;	unspecified, using default values
   815                           ;	Boot Block Table Read Protection bit
   816                           ;	EBTRB = 0x1, unprogrammed default
   817   30000D                     	org	3145741
   818   30000D  40                 	db	64
   819                           tosu	equ	0xFFF
   820                           tosh	equ	0xFFE
   821                           tosl	equ	0xFFD
   822                           stkptr	equ	0xFFC
   823                           pclatu	equ	0xFFB
   824                           pclath	equ	0xFFA
   825                           pcl	equ	0xFF9
   826                           tblptru	equ	0xFF8
   827                           tblptrh	equ	0xFF7
   828                           tblptrl	equ	0xFF6
   829                           tablat	equ	0xFF5
   830                           prodh	equ	0xFF4
   831                           prodl	equ	0xFF3
   832                           indf0	equ	0xFEF
   833                           postinc0	equ	0xFEE
   834                           postdec0	equ	0xFED
   835                           preinc0	equ	0xFEC
   836                           plusw0	equ	0xFEB
   837                           fsr0h	equ	0xFEA
   838                           fsr0l	equ	0xFE9
   839                           wreg	equ	0xFE8
   840                           indf1	equ	0xFE7
   841                           postinc1	equ	0xFE6
   842                           postdec1	equ	0xFE5
   843                           preinc1	equ	0xFE4
   844                           plusw1	equ	0xFE3
   845                           fsr1h	equ	0xFE2
   846                           fsr1l	equ	0xFE1
   847                           bsr	equ	0xFE0
   848                           indf2	equ	0xFDF
   849                           postinc2	equ	0xFDE
   850                           postdec2	equ	0xFDD
   851                           preinc2	equ	0xFDC
   852                           plusw2	equ	0xFDB
   853                           fsr2h	equ	0xFDA
   854                           fsr2l	equ	0xFD9
   855                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         1
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     10      11
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           244      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_setServoPosition

Critical Paths under _ISR in COMRAM

    _ISR->i2_setServoPosition

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0      45
                   _setServoPosition
 ---------------------------------------------------------------------------------
 (1) _setServoPosition                                     4     2      2      45
                                              6 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _ISR                                                  2     2      0     114
                                              4 COMRAM     2     2      0
                 i2_setServoPosition
 ---------------------------------------------------------------------------------
 (3) i2_setServoPosition                                   4     2      2      46
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _setServoPosition

 _ISR (ROOT)
   i2_setServoPosition

Address spaces:
Name               Size   Autos  Total    Usage
BIGRAM            1523      0       0      0.0%
BITBANK4           256      0       0      0.0%
BANK4              256      0       0      0.0%
BITBANK3           256      0       0      0.0%
BANK3              256      0       0      0.0%
BITBANK2           256      0       0      0.0%
BANK2              256      0       0      0.0%
BITBANK1           256      0       0      0.0%
BANK1              256      0       0      0.0%
BITBANK5           244      0       0      0.0%
BANK5              244      0       0      0.0%
BITBANK0           128      0       0      0.0%
BANK0              128      0       0      0.0%
BITCOMRAM          126      0       0      0.0%
COMRAM             126     10      11      8.7%
BITBIGSFR_1l        32      0       0      0.0%
BITBIGSFR_1h        22      0       0      0.0%
BITBIGSFRll         11      0       0      0.0%
BITBIGSFR_5h        10      0       0      0.0%
BITBIGSFRlh          8      0       0      0.0%
BITBIGSFRh           7      0       0      0.0%
BITBIGSFR_2          6      0       0      0.0%
BITBIGSFR_4          3      0       0      0.0%
BITBIGSFR_3          3      0       0      0.0%
BITBIGSFR_5l         2      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0      11      0.0%


Microchip Technology PIC18 Macro Assembler V2.50 build 20240725155939 
Symbol Table                                                                                   Sun Jan 12 17:53:47 2025

                         l31 06AA                           l32 06AA                           l37 06DE  
                        l763 06B2                          l771 0694                          l781 069E  
                        l773 0696                          l775 0698                          l767 066C  
                        l777 069A                          l769 0674                          l779 069C  
                        _PR2 0FCB                          _ISR 0008                          wreg 0FE8  
                       ?_ISR 0001                         ISR@x 0005                         _LATC 0F8B  
                       i2l37 070C                         i2l45 0668                         _main 066C  
                       btemp 000C                         start 000E                 ___param_bank 0000  
                      ??_ISR 0005                        ?_main 0001                        _T2CON 0FCA  
                      i2l801 065A                        i2l803 0666                        i2l765 06E0  
                      i2l783 0604                        i2l793 0624                        i2l785 0612  
                      i2l795 0630                        i2l787 061C                        i2l797 063A  
                      i2l799 063E                        ttemp5 000D                        ttemp6 0010  
                      ttemp7 0014             _setServoPosition 06B2                        status 0FD8  
                      wtemp8 000D  i2setServoPosition@dutyCycle 0001              __initialization 070E  
               __end_of_main 06B2                       ??_main 000B                __activetblptr 0000  
                     _CCPR1L 0FBE   __end_ofi2_setServoPosition 070E                       i2u3_40 0612  
                     i2u3_41 060E                       i2u4_40 065A                       i2u4_41 0656  
                     i2u5_47 0614                       i2u6_47 0632                       isa$std 0001  
               __mediumconst 0000              _currentPosition 000B                   __accesstop 0080  
    __end_of__initialization 0710                ___rparam_used 0001               __pcstackCOMRAM 0001  
   __end_of_setServoPosition 06E0                      __Hparam 0000                      __Lparam 0000  
               __psmallconst 0600                      __pcinit 070E                      __ramtop 0600  
                    __ptext0 066C                      __ptext1 06B2                      __ptext3 06E0  
                  _T2CONbits 0FCA               __pintcode_body 0602         end_of_initialization 0710  
                    int_func 0602           i2_setServoPosition 06E0          ?i2_setServoPosition 0001  
                  _TRISBbits 0F93                    _TRISCbits 0F94         ??i2_setServoPosition 0003  
                _CCP1CONbits 0FBD          start_initialization 070E                  __end_of_ISR 066C  
          ?_setServoPosition 0007                  __pbssCOMRAM 000B           ??_setServoPosition 0009  
  setServoPosition@dutyCycle 0007                    __pintcode 0008                  __smallconst 0600  
                   __Hrparam 0000                     __Lrparam 0000                     isa$xinst 0000  
                   int$flags 000C                   _INTCONbits 0FF2                     intlevel2 0000  
                 _OSCCONbits 0FD3  
